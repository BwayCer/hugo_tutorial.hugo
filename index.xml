<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hugo: A Fast and Flexible Website Generator</title>
    <link>http://gohugo.io/index.xml</link>
    <description>Recent content on Hugo: A Fast and Flexible Website Generator</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 08 Jan 2015 16:11:23 -0700</lastBuildDate>
    <atom:link href="http://gohugo.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Strange EOF error</title>
      <link>http://gohugo.io/troubleshooting/strange-eof-error/</link>
      <pubDate>Thu, 08 Jan 2015 16:11:23 -0700</pubDate>
      
      <guid>http://gohugo.io/troubleshooting/strange-eof-error/</guid>
      <description>

&lt;h2 id=&#34;trouble-hugo-new-aborts-with-cryptic-eof-error&#34;&gt;Trouble: &lt;code&gt;hugo new&lt;/code&gt; aborts with cryptic EOF error&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;I&amp;rsquo;m running into an issue where I cannot get archetypes working, when running &lt;code&gt;hugo new showcase/test.md&lt;/code&gt;, for example, I see an &lt;code&gt;EOF&lt;/code&gt; error thrown by Hugo.&lt;/p&gt;

&lt;p&gt;I have set up this test repository to show exactly what I&amp;rsquo;ve done, but it is essentially a vanilla installation of Hugo. &lt;a href=&#34;https://github.com/polds/hugo-archetypes-test&#34;&gt;https://github.com/polds/hugo-archetypes-test&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When in that repository, using Hugo v0.12 to run &lt;code&gt;hugo new -v showcase/test.md&lt;/code&gt;, I see the following output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;INFO: 2015/01/04 Using config file: /private/tmp/test/config.toml
INFO: 2015/01/04 attempting to create  showcase/test.md of showcase
INFO: 2015/01/04 curpath: /private/tmp/test/archetypes/showcase.md
ERROR: 2015/01/04 EOF
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Is there something that I am blatantly missing?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;p&gt;Thank you for reporting this issue.  The solution is to add a final newline (i.e. EOL) to the end of your default.md archetype file of your theme.  More discussions happened on the forum here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://discuss.gohugo.io/t/archetypes-not-properly-working-in-0-12/544&#34;&gt;http://discuss.gohugo.io/t/archetypes-not-properly-working-in-0-12/544&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://discuss.gohugo.io/t/eol-f-in-archetype-files/554&#34;&gt;http://discuss.gohugo.io/t/eol-f-in-archetype-files/554&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Due to popular demand, Hugo&amp;rsquo;s parser has been enhanced to
accommodate archetype files without final EOL,
thanks to the great work by &lt;a href=&#34;https://github.com/tatsushid&#34;&gt;@tatsushid&lt;/a&gt;,
in the upcoming v0.13 release,&lt;/p&gt;

&lt;p&gt;Until then, for us running the stable v0.12 release, please remember to add the final EOL diligently.  &lt;i class=&#34;fa fa-smile-o&#34;&gt;&lt;/i&gt;&lt;/p&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/hugo/issues/776&#34;&gt;https://github.com/spf13/hugo/issues/776&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Introduction to Hugo</title>
      <link>http://gohugo.io/overview/introduction/</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://gohugo.io/overview/introduction/</guid>
      <description>

&lt;h2 id=&#34;what-is-hugo&#34;&gt;What is Hugo?&lt;/h2&gt;

&lt;p&gt;Hugo is a general-purpose website framework. Technically speaking, Hugo is
a static site generator. Unlike other systems which dynamically build a page
every time a visitor requests one, Hugo does the building when you create
your content. Since websites are viewed far more often than they are
edited, Hugo is optimized for website viewing while providing a great
writing experience.&lt;/p&gt;

&lt;p&gt;Sites built with Hugo are extremely fast and very secure. Hugo sites can
be hosted anywhere, including &lt;a href=&#34;https://www.heroku.com/&#34;&gt;Heroku&lt;/a&gt;, &lt;a href=&#34;https://www.godaddy.com/&#34;&gt;GoDaddy&lt;/a&gt;, &lt;a href=&#34;http://www.dreamhost.com/&#34;&gt;DreamHost&lt;/a&gt;,
&lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt;, &lt;a href=&#34;https://www.netlify.com&#34;&gt;Netlify&lt;/a&gt;, &lt;a href=&#34;https://surge.sh&#34;&gt;Surge&lt;/a&gt;, &lt;a href=&#34;https://www.aerobatic.com/&#34;&gt;Aerobatic&lt;/a&gt;, &lt;a href=&#34;https://firebase.google.com/docs/hosting/&#34;&gt;Firebase Hosting&lt;/a&gt;,
&lt;a href=&#34;http://cloud.google.com/storage/&#34;&gt;Google Cloud Storage&lt;/a&gt;, &lt;a href=&#34;http://aws.amazon.com/s3/&#34;&gt;Amazon S3&lt;/a&gt; and &lt;a href=&#34;http://aws.amazon.com/cloudfront/&#34; title=&#34;Amazon CloudFront&#34;&gt;CloudFront&lt;/a&gt;, and work well
with CDNs. Hugo sites run without dependencies on expensive runtimes
like Ruby, Python or PHP and without dependencies on any databases.&lt;/p&gt;

&lt;p&gt;We think of Hugo as the ideal website creation tool. With nearly instant
build times and the ability to rebuild whenever a change is made, Hugo
provides a very fast feedback loop. This is essential when you are
designing websites, but also very useful when creating content.&lt;/p&gt;

&lt;h2 id=&#34;what-makes-hugo-different&#34;&gt;What makes Hugo different?&lt;/h2&gt;

&lt;p&gt;Web site generators render content into HTML files. Most are &amp;ldquo;dynamic
site generators.&amp;rdquo; That means the HTTP
server (which is the program running on your website that the user&amp;rsquo;s
browser talks to) runs the generator to create a new HTML file
each and every time a user wants to view a page.&lt;/p&gt;

&lt;p&gt;Creating the page dynamically means that the computer hosting
the HTTP server has to have enough memory and CPU to effectively run
the generator around the clock. If not, then the user has to wait
in a queue for the page to be generated.&lt;/p&gt;

&lt;p&gt;Nobody wants users to wait longer than needed, so the dynamic site
generators programmed their systems to cache the HTML files. When
a file is cached, a copy of it is temporarily stored on the computer.
It is much faster for the HTTP server to send that copy the next time
the page is requested than it is to generate it from scratch.&lt;/p&gt;

&lt;p&gt;Hugo takes caching a step further. All HTML files are rendered on your
computer. You can review the files before you copy them to the computer
hosting the HTTP server. Since the HTML files aren&amp;rsquo;t generated dynamically,
we say that Hugo is a &amp;ldquo;static site generator.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Not running a web site generator on your HTTP server has many benefits.
The most noticeable is performance - HTTP servers are very good at
sending files. So good that you can effectively serve the same number
of pages with a fraction of the memory and CPU needed for a dynamic site.&lt;/p&gt;

&lt;p&gt;Hugo has two components to help you build and test your web site. The
one that you&amp;rsquo;ll probably use most often is the built-in HTTP server.
When you run &lt;code&gt;hugo server&lt;/code&gt;, Hugo renders all of your content into
HTML files and then runs an HTTP server on your computer so that you
can see what the pages look like.&lt;/p&gt;

&lt;p&gt;The second component is used when you&amp;rsquo;re ready to publish your web
site to the computer running your website. Running Hugo without any
actions will rebuild your entire web site using the &lt;code&gt;baseURL&lt;/code&gt; setting
from your site&amp;rsquo;s configuration file. That&amp;rsquo;s required to have your page
links work properly with most hosting companies.&lt;/p&gt;

&lt;h2 id=&#34;how-fast-is-hugo&#34;&gt;How fast is Hugo?&lt;/h2&gt;

&lt;div class=&#34;video-container&#34;&gt;
&lt;iframe class=&#34;youtube-player&#34; type=&#34;text/html&#34; width=&#34;100%&#34; height=&#34;auto&#34; src=&#34;https://www.youtube.com/embed/CdiDYZ51a2o&#34; allowfullscreen frameborder=&#34;0&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;what-does-hugo-do&#34;&gt;What does Hugo do?&lt;/h2&gt;

&lt;p&gt;In technical terms, Hugo takes a source directory of files and
templates and uses these as input to create a complete website.&lt;/p&gt;

&lt;p&gt;Hugo boasts the following features:&lt;/p&gt;

&lt;h3 id=&#34;general&#34;&gt;General&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Extremely fast build times (~1 ms per page)&lt;/li&gt;
&lt;li&gt;Completely cross platform: Runs on &lt;i class=&#34;fa fa-apple&#34;&gt;&lt;/i&gt;&amp;nbsp;Mac OS&amp;nbsp;X, &lt;i class=&#34;fa fa-linux&#34;&gt;&lt;/i&gt;&amp;nbsp;Linux, &lt;i class=&#34;fa fa-windows&#34;&gt;&lt;/i&gt;&amp;nbsp;Windows, and more!&lt;/li&gt;
&lt;li&gt;Easy &lt;a href=&#34;http://gohugo.io/overview/installing/&#34;&gt;installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Render changes &lt;a href=&#34;http://gohugo.io/overview/usage/&#34;&gt;on the fly&lt;/a&gt; with &lt;a href=&#34;http://gohugo.io/extras/livereload/&#34;&gt;LiveReload&lt;/a&gt; as you develop&lt;/li&gt;
&lt;li&gt;Complete theme support&lt;/li&gt;
&lt;li&gt;Host your site anywhere&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;organization&#34;&gt;Organization&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Straightforward &lt;a href=&#34;http://gohugo.io/content/organization/&#34;&gt;organization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Support for &lt;a href=&#34;http://gohugo.io/content/sections/&#34;&gt;website sections&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Completely customizable &lt;a href=&#34;http://gohugo.io/extras/urls/&#34;&gt;URLs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Support for configurable &lt;a href=&#34;http://gohugo.io/taxonomies/overview/&#34;&gt;taxonomies&lt;/a&gt; which includes categories and tags.  Create your own custom organization of content&lt;/li&gt;
&lt;li&gt;Ability to &lt;a href=&#34;http://gohugo.io/content/ordering/&#34;&gt;sort content&lt;/a&gt; as you desire&lt;/li&gt;
&lt;li&gt;Automatic &lt;a href=&#34;http://gohugo.io/extras/toc/&#34;&gt;table of contents&lt;/a&gt; generation&lt;/li&gt;
&lt;li&gt;Dynamic menu creation&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gohugo.io/extras/urls/&#34;&gt;Pretty URLs&lt;/a&gt; support&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gohugo.io/extras/permalinks/&#34;&gt;Permalink&lt;/a&gt; pattern support&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gohugo.io/extras/aliases/&#34;&gt;Aliases&lt;/a&gt; (redirects)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;content&#34;&gt;Content&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Native support for content written in &lt;a href=&#34;http://gohugo.io/content/example/&#34;&gt;Markdown&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Support for other languages through &lt;em&gt;external helpers&lt;/em&gt;, see &lt;a href=&#34;http://gohugo.io/content/supported-formats&#34;&gt;supported formats&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Support for TOML, YAML and JSON metadata in &lt;a href=&#34;http://gohugo.io/content/front-matter/&#34;&gt;frontmatter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Completely &lt;a href=&#34;http://gohugo.io/layout/homepage/&#34;&gt;customizable homepage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Support for multiple &lt;a href=&#34;http://gohugo.io/content/types/&#34;&gt;content types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Automatic and user defined &lt;a href=&#34;http://gohugo.io/content/summaries/&#34;&gt;summaries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gohugo.io/extras/shortcodes/&#34;&gt;Shortcodes&lt;/a&gt; to enable rich content inside of Markdown&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gohugo.io/layout/variables/&#34;&gt;&amp;ldquo;Minutes to Read&amp;rdquo;&lt;/a&gt; functionality&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gohugo.io/layout/variables/&#34;&gt;&amp;ldquo;Wordcount&amp;rdquo;&lt;/a&gt; functionality&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;additional-features&#34;&gt;Additional Features&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Integrated &lt;a href=&#34;https://disqus.com/&#34;&gt;Disqus&lt;/a&gt; comment support&lt;/li&gt;
&lt;li&gt;Integrated &lt;a href=&#34;https://google-analytics.com/&#34;&gt;Google Analytics&lt;/a&gt; support&lt;/li&gt;
&lt;li&gt;Automatic &lt;a href=&#34;http://gohugo.io/layout/rss/&#34;&gt;RSS&lt;/a&gt; creation&lt;/li&gt;
&lt;li&gt;Support for &lt;a href=&#34;http://golang.org/pkg/html/template/&#34;&gt;Go&lt;/a&gt;, &lt;a href=&#34;https://github.com/eknkc/amber&#34;&gt;Amber&lt;/a&gt; and &lt;a href=&#34;https://github.com/yosssi/ace&#34;&gt;Ace&lt;/a&gt; HTML templates&lt;/li&gt;
&lt;li&gt;Syntax &lt;a href=&#34;http://gohugo.io/extras/highlighting/&#34;&gt;highlighting&lt;/a&gt; powered by &lt;a href=&#34;http://pygments.org/&#34;&gt;Pygments&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See what&amp;rsquo;s coming next in the &lt;a href=&#34;http://gohugo.io/meta/roadmap/&#34;&gt;roadmap&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;who-should-use-hugo&#34;&gt;Who should use Hugo?&lt;/h2&gt;

&lt;p&gt;Hugo is for people that prefer writing in a text editor over
a browser.&lt;/p&gt;

&lt;p&gt;Hugo is for people who want to hand code their own website without
worrying about setting up complicated runtimes, dependencies and
databases.&lt;/p&gt;

&lt;p&gt;Hugo is for people building a blog, company site, portfolio, tumblog,
documentation, single page site or a site with thousands of
pages.&lt;/p&gt;

&lt;h2 id=&#34;why-did-you-write-hugo&#34;&gt;Why did you write Hugo?&lt;/h2&gt;

&lt;p&gt;I wrote Hugo ultimately for a few reasons. First, I was disappointed with
WordPress, my then website solution. With it, I couldn&amp;rsquo;t create
content as efficiently as I wanted to.
It rendered slowly. It required me to be online to write
posts: plus its constant security updates and the horror stories of people&amp;rsquo;s
hacked blogs! I hated how content for it was written only in HTML, instead of the much
simpler Markdown. Overall, I felt like WordPress got in my way
much more than it helped me. It kept
me from writing great content.&lt;/p&gt;

&lt;p&gt;I looked at the existing static site generators
like &lt;a href=&#34;http://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt;, &lt;a href=&#34;https://middlemanapp.com/&#34;&gt;Middleman&lt;/a&gt; and &lt;a href=&#34;http://nanoc.ws/&#34;&gt;Nanoc&lt;/a&gt;.
All had complicated installation dependencies and took far longer to render
my blog with its hundreds of posts than I felt was acceptable. I wanted
a framework to be able to give me rapid feedback while making changes to the
templates, and the 5+-minute render times were just too slow. In general,
they were also very blog minded and didn&amp;rsquo;t have the ability to provide
other content types and flexible URLs.&lt;/p&gt;

&lt;p&gt;I wanted to develop a fast and full-featured website framework without any
dependencies. The &lt;a href=&#34;http://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go language&lt;/a&gt; seemed to have all the features I needed
in a language. I began developing Hugo in Go and fell in love with the
language. I hope you will enjoy using Hugo (and contributing to it) as much
as I have writing it.&lt;/p&gt;

&lt;p&gt;&amp;mdash;Steve Francia (@spf13)&lt;/p&gt;

&lt;h2 id=&#34;next-steps&#34;&gt;Next Steps&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://gohugo.io/overview/installing/&#34;&gt;Install Hugo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gohugo.io/overview/quickstart/&#34;&gt;Quick start&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gohugo.io/community/mailing-list/&#34;&gt;Join the Mailing List&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/hugo&#34;&gt;Star us on GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://discuss.gohugo.io/&#34;&gt;Discussion Forum&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Continuous deployment with Bitbucket &amp; Aerobatic</title>
      <link>http://gohugo.io/tutorials/hosting-on-bitbucket/</link>
      <pubDate>Sat, 04 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://gohugo.io/tutorials/hosting-on-bitbucket/</guid>
      <description>

&lt;h1 id=&#34;continuous-deployment-with-bitbucket-aerobatic&#34;&gt;Continuous deployment with Bitbucket &amp;amp; Aerobatic&lt;/h1&gt;

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;In this tutorial, we will use &lt;a href=&#34;https://bitbucket.org/&#34;&gt;Bitbucket&lt;/a&gt; and &lt;a href=&#34;https://www.aerobatic.com&#34;&gt;Aerobatic&lt;/a&gt; to build, deploy, and host a Hugo site. Aerobatic is a static hosting service that integrates with Bitbucket and provides a free hosting tier.&lt;/p&gt;

&lt;p&gt;It is assumed that you know how to use git for version control and have a Bitbucket account.&lt;/p&gt;

&lt;h2 id=&#34;install-aerobatic-cli&#34;&gt;Install Aerobatic CLI&lt;/h2&gt;

&lt;p&gt;If you haven&amp;rsquo;t previously used Aerobatic, you&amp;rsquo;ll first need to install the Command Line Interface (CLI) and create an account. For a list of all commands available, see the &lt;a href=&#34;https://www.aerobatic.com/docs/cli/&#34;&gt;Aerobatic CLI&lt;/a&gt; docs.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install aerobatic-cli -g
aero register
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;create-and-deploy-site&#34;&gt;Create and Deploy Site&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hugo new site my-new-hugo-site
cd my-new-hugo-site
cd themes; git clone https://github.com/eliasson/liquorice
hugo -t liquorice
aero create                                           # create the Aerobatic site
hugo --baseURL https://my-new-hugo-site.aerobatic.io  # build the site overriding baseURL
aero deploy -d public                                 # deploy output to Aerobatic

Version v1 deployment complete.
View now at https://hugo-docs-test.aerobatic.io
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the rendered page response, the &lt;code&gt;https://__baseurl__&lt;/code&gt; will be replaced with your actual site url (in this example, &lt;code&gt;https://my-new-hugo-site.aerobatic.io&lt;/code&gt;). You can always rename your Aerobatic website with the &lt;code&gt;aero rename&lt;/code&gt; command.&lt;/p&gt;

&lt;h2 id=&#34;push-hugo-site-to-bitbucket&#34;&gt;Push Hugo site to Bitbucket&lt;/h2&gt;

&lt;p&gt;We will now create a git repository and then push our code to Bitbucket. In Bitbucket, create a repository.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://gohugo.io/img/tutorials/hosting-on-bitbucket/bitbucket-create-repo.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# initialize new git repository
git init

# set up our .gitignore file
echo -e &amp;quot;/public \n/themes \naero-deploy.tar.gz&amp;quot; &amp;gt;&amp;gt; .gitignore

# commit and push code to master branch
git add --all
git commit -m &amp;quot;Initial commit&amp;quot;
git remote add origin git@bitbucket.org:YourUsername/my-new-hugo-site.git
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;continuous-deployment-with-bitbucket-pipelines&#34;&gt;Continuous Deployment With Bitbucket Pipelines&lt;/h2&gt;

&lt;p&gt;In the example above, we pushed the compiled assets in the &lt;code&gt;/public&lt;/code&gt; folder to Aerobatic. In the following example, we use Bitbucket Pipelines to continuously create and deploy the compiled assets to Aerobatic.&lt;/p&gt;

&lt;h3 id=&#34;step-1-configure-bitbucket-pipelines&#34;&gt;Step 1: Configure Bitbucket Pipelines&lt;/h3&gt;

&lt;p&gt;In your Hugo website&amp;rsquo;s Bitbucket repo;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Click the Pipelines link in the left nav menu of your Bitbucket repository.&lt;/li&gt;
&lt;li&gt;Click the Enable Pipelines button.&lt;/li&gt;
&lt;li&gt;On the next screen, leave the default template and click Next.&lt;/li&gt;
&lt;li&gt;In the editor, paste in the yaml contents below and click Commit.&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;image: beevelop/nodejs-python
pipelines:
  branches:
    master:
      - step:
          script:
            - apt-get update -y &amp;amp;&amp;amp; apt-get install wget
            - apt-get -y install git
            - wget https://github.com/spf13/hugo/releases/download/v0.18/hugo_0.18-64bit.deb
            - dpkg -i hugo*.deb
            - git clone https://github.com/eliasson/liquorice themes/liquorice
            - hugo --theme=liquorice --baseURL https://__baseurl__ --buildDrafts
            - npm install -g aerobatic-cli
            - aero deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step-2-create-aerobatic-api-key-environment-variable&#34;&gt;Step 2: Create &lt;code&gt;AEROBATIC_API_KEY&lt;/code&gt; environment variable.&lt;/h3&gt;

&lt;p&gt;This step only needs to be done once per account. From the command line;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;aero apikey
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Navigate to the Bitbucket account settings for the account that the website repo belongs to.&lt;/li&gt;
&lt;li&gt;Scroll down to the bottom of the left nav and click the Environment variables link in the PIPELINES section.&lt;/li&gt;
&lt;li&gt;Create a new environment variable called AEROBATIC_API_KEY with the value you got by running the &lt;code&gt;aero apikey&lt;/code&gt; command. Be sure to click the Secured checkbox.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;step-3-edit-and-commit-code&#34;&gt;Step 3: Edit and Commit Code&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hugo new post/good-to-great.md
hugo server --buildDrafts -t liquorice #Check that all looks good

# commit and push code to master branch
git add --all
git commit -m &amp;quot;New blog post&amp;quot;
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Your code will be committed to Bitbucket, Bitbucket Pipelines will run your build, and a new version of your site will be deployed to Aerobatic.&lt;/p&gt;

&lt;p&gt;At this point, you can now create and edit blog posts directly in the Bitbucket UI.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://gohugo.io/img/tutorials/hosting-on-bitbucket/bitbucket-blog-post.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;suggested-next-steps&#34;&gt;Suggested next steps&lt;/h2&gt;

&lt;p&gt;The code for this example can be found in this Bitbucket &lt;a href=&#34;https://bitbucket.org/dundonian/hugo-docs-test&#34;&gt;repository&lt;/a&gt;. Aerobatic also provides a number of additional &lt;a href=&#34;https://www.aerobatic.com/docs&#34;&gt;plugins&lt;/a&gt; such as auth and redirects that you can use for your Hugo site.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hosting on GitLab Pages</title>
      <link>http://gohugo.io/tutorials/hosting-on-gitlab/</link>
      <pubDate>Thu, 23 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>http://gohugo.io/tutorials/hosting-on-gitlab/</guid>
      <description>

&lt;h1 id=&#34;continuous-deployment-with-gitlab&#34;&gt;Continuous deployment with GitLab&lt;/h1&gt;

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;In this tutorial, we will use &lt;a href=&#34;https://gitlab.com/&#34;&gt;GitLab&lt;/a&gt; to build, deploy, and host a &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; site. With Hugo and GitLab, this is incredibly easy.&lt;/p&gt;

&lt;p&gt;It is assumed that you know how to use git for version control and have a GitLab account, and that you have gone through the &lt;a href=&#34;http://gohugo.io/overview/quickstart/&#34;&gt;quickstart guide&lt;/a&gt; and already have a Hugo site on your local machine.&lt;/p&gt;

&lt;h2 id=&#34;create-gitlab-ci-yml&#34;&gt;Create .gitlab-ci.yml&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd your-hugo-site
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the root directory of your Hugo site, create a &lt;code&gt;.gitlab-ci.yml&lt;/code&gt; file. The &lt;code&gt;.gitlab-ci.yml&lt;/code&gt; configures the GitLab CI on how to build your page. Simply add the content below.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;image: publysher/hugo

pages:
  script:
  - hugo
  artifacts:
    paths:
    - public
  only:
  - master
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;push-hugo-site-to-gitlab&#34;&gt;Push Hugo site to GitLab&lt;/h2&gt;

&lt;p&gt;Next up, create a new repository on GitLab. It is &lt;em&gt;not&lt;/em&gt; necessary to set the repository public. In addition, you might want to add &lt;code&gt;/public&lt;/code&gt; to your .gitignore file, as there is no need to push compiled assets to GitLab.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# initialize new git repository
git init

# add /public directory to our .gitignore file
echo &amp;quot;/public&amp;quot; &amp;gt;&amp;gt; .gitignore

# commit and push code to master branch
git add .
git commit -m &amp;quot;Initial commit&amp;quot;
git remote add origin https://gitlab.com/YourUsername/your-hugo-site.git
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;wait-for-your-page-to-be-built&#34;&gt;Wait for your page to be built&lt;/h2&gt;

&lt;p&gt;That&amp;rsquo;s it! You can now follow the CI agent building your page at &lt;a href=&#34;https://gitlab.com/YourUsername/your-hugo-site/pipelines&#34;&gt;https://gitlab.com/YourUsername/your-hugo-site/pipelines&lt;/a&gt;.
After the build has passed, your new website is available at &lt;a href=&#34;https://YourUsername.gitlab.io/your-hugo-site/&#34;&gt;https://YourUsername.gitlab.io/your-hugo-site/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;suggested-next-steps&#34;&gt;Suggested next steps&lt;/h2&gt;

&lt;p&gt;GitLab supports using custom CNAME&amp;rsquo;s and TLS certificates, but this is out of the scope of this tutorial. For more details on GitLab Pages, see &lt;a href=&#34;https://about.gitlab.com/2016/04/07/gitlab-pages-setup/&#34;&gt;https://about.gitlab.com/2016/04/07/gitlab-pages-setup/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to contribute to Hugo</title>
      <link>http://gohugo.io/tutorials/how-to-contribute-to-hugo/</link>
      <pubDate>Sun, 03 Apr 2016 13:21:56 +0200</pubDate>
      
      <guid>http://gohugo.io/tutorials/how-to-contribute-to-hugo/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Hugo is an open source project and lives by the work of its &lt;a href=&#34;https://github.com/spf13/hugo/graphs/contributors&#34;&gt;contributors&lt;/a&gt;. Help to make Hugo even more awesome. There are plenty of &lt;a href=&#34;https://github.com/spf13/hugo/issues&#34;&gt;open issues&lt;/a&gt; on GitHub and we need your help.&lt;/p&gt;

&lt;p&gt;This tutorial is intended for people who are new to Git, GitHub or open source projects in general. It should help to overcome most of the barriers that newcomers encounter. It describes step by step what you need to do.&lt;/p&gt;

&lt;p&gt;For any kind of questions please take a look at our &lt;a href=&#34;https://discuss.gohugo.io/&#34;&gt;forum&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;install-go&#34;&gt;Install Go&lt;/h2&gt;

&lt;p&gt;The installation of Go should take only a few minutes. &lt;a href=&#34;https://golang.org/dl/&#34;&gt;Download&lt;/a&gt; the latest stable version of Go and follow the official &lt;a href=&#34;https://golang.org/doc/install&#34;&gt;installation guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s confirm the correct installation of Go. Open a terminal (or command line under Windows). Execute &lt;code&gt;go version&lt;/code&gt; and you should see the version number of your Go installation. Next, make sure that you setup the &lt;code&gt;GOPATH&lt;/code&gt; as described in the installation guide.&lt;/p&gt;

&lt;p&gt;You can print the &lt;code&gt;GOPATH&lt;/code&gt; with &lt;code&gt;echo $GOPATH&lt;/code&gt;. You should see a non-empty string containing a valid path to your Go workspace.&lt;/p&gt;

&lt;h3 id=&#34;gvm-as-alternative&#34;&gt;GVM as alternative&lt;/h3&gt;

&lt;p&gt;More experienced users can use the &lt;a href=&#34;https://github.com/moovweb/gvm&#34;&gt;Go Version Manager&lt;/a&gt;, or GVM for short. It allows you to switch between different Go versions &lt;em&gt;on the same machine&lt;/em&gt;. Probably you don&amp;rsquo;t need this feature. But you can easily upgrade to a new released Go version with a few commands.&lt;/p&gt;

&lt;p&gt;This is handy if you follow the developement of Hugo over a longer period of time. Future versions of Hugo will usually be compiled with the latest version of Go. Sooner or later you have to upgrade if you want to keep up.&lt;/p&gt;

&lt;h2 id=&#34;create-an-account-on-github&#34;&gt;Create an account on GitHub&lt;/h2&gt;

&lt;p&gt;If you&amp;rsquo;re going to contribute code, you&amp;rsquo;ll need to have an account on GitHub. Go to &lt;a href=&#34;https://github.com/join&#34;&gt;www.github.com/join&lt;/a&gt; and set up a personal account.&lt;/p&gt;

&lt;h2 id=&#34;install-git-on-your-system&#34;&gt;Install Git on your system&lt;/h2&gt;

&lt;p&gt;You will need to install Git. This tutorial assumes basic knowledge about Git. Refer to this excellent &lt;a href=&#34;https://git-scm.com/&#34;&gt;Git book&lt;/a&gt; if you are not sure where to begin. The used terminology will be explained with annotations.&lt;/p&gt;

&lt;p&gt;Git is a &lt;a href=&#34;https://en.wikipedia.org/wiki/Version_control&#34;&gt;version control system&lt;/a&gt; to track the changes of source code. Hugo depends on smaller third-party packages that are used to extend the functionality. We use them because we don&amp;rsquo;t want to reinvent the wheel.&lt;/p&gt;

&lt;p&gt;Go ships with a sub-command called &lt;code&gt;get&lt;/code&gt; that will download these packages for us when we setup our working environment. The source code of the packages is tracked with Git. &lt;code&gt;get&lt;/code&gt; will interact with the Git servers of the package hosters in order to fetch all dependencies.&lt;/p&gt;

&lt;p&gt;Move back to the terminal and check if Git is already installed. Type in &lt;code&gt;git version&lt;/code&gt; and press enter. You can skip the rest of this section if the command returned a version number. Otherwise &lt;a href=&#34;https://git-scm.com/downloads&#34;&gt;download&lt;/a&gt; the lastest version of Git and follow this &lt;a href=&#34;https://git-scm.com/book/en/v2/Getting-Started-Installing-Git&#34;&gt;installation guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finally, check again with &lt;code&gt;git version&lt;/code&gt; if Git was installed successfully.&lt;/p&gt;

&lt;h3 id=&#34;git-graphical-front-ends&#34;&gt;Git Graphical Front Ends&lt;/h3&gt;

&lt;p&gt;There are several &lt;a href=&#34;https://git-scm.com/downloads/guis&#34;&gt;GUI clients&lt;/a&gt; that help you to operate Git. Not all are available for all operating systems and maybe differ in their usage. Thus, so we will use the command line since the commands are everywhere the same.&lt;/p&gt;

&lt;h3 id=&#34;install-hub-on-your-system-optional&#34;&gt;Install Hub on your system (optional)&lt;/h3&gt;

&lt;p&gt;Hub is a great tool for working with GitHub. The main site for it is &lt;a href=&#34;https://hub.github.com/&#34;&gt;www.hub.github.com&lt;/a&gt;. Feel free to install this little Git wrapper.&lt;/p&gt;

&lt;p&gt;On a Mac, install Hub using brew:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install hub
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create an alias (in Bash) so that typing git actually runs Hub:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;echo &amp;quot;alias git=&#39;hub&#39;&amp;quot; &amp;gt;&amp;gt; ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Confirm the installation:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git version 2.6.3
hub version 2.2.2
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;set-up-your-working-copy&#34;&gt;Set up your working copy&lt;/h2&gt;

&lt;p&gt;The working copy is set up locally on your computer. It&amp;rsquo;s what you&amp;rsquo;ll edit, compile, and end up pushing back to GitHub. The main steps are cloning the repository and creating your fork as a remote.&lt;/p&gt;

&lt;h3 id=&#34;clone-the-repository&#34;&gt;Clone the repository&lt;/h3&gt;

&lt;p&gt;We assume that you&amp;rsquo;ve set up your &lt;code&gt;GOPATH&lt;/code&gt; (see the section above if you&amp;rsquo;re unsure about this). You should now copy the Hugo repository down to your computer. You&amp;rsquo;ll hear this called &amp;ldquo;clone the repo&amp;rdquo;. GitHub&amp;rsquo;s &lt;a href=&#34;https://help.github.com/articles/cloning-a-repository/&#34;&gt;help pages&lt;/a&gt; give us a short explanation:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When you create a repository on GitHub, it exists as a remote repository. You can create a local clone of your repository on your computer and sync between the two locations.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We&amp;rsquo;re going to clone the &lt;a href=&#34;https://github.com/spf13/hugo&#34;&gt;master Hugo repository&lt;/a&gt;. That seems counter-intuitive, since you won&amp;rsquo;t have commit rights on it. But it&amp;rsquo;s required for the Go workflow. You&amp;rsquo;ll work on a copy of the master and push your changes to your own repository on GitHub.&lt;/p&gt;

&lt;p&gt;So, let&amp;rsquo;s clone that master repository:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go get -v -u github.com/spf13/hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;fork-the-repository&#34;&gt;Fork the repository&lt;/h3&gt;

&lt;p&gt;If you&amp;rsquo;re not fimiliar with this term, GitHub&amp;rsquo;s &lt;a href=&#34;https://help.github.com/articles/fork-a-repo/&#34;&gt;help pages&lt;/a&gt; provide again a simple explanation:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A fork is a copy of a repository. Forking a repository allows you to freely experiment with changes without affecting the original project.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;fork-by-hand&#34;&gt;Fork by hand&lt;/h4&gt;

&lt;p&gt;Open the &lt;a href=&#34;https://github.com/spf13/hugo&#34;&gt;Hugo repository&lt;/a&gt; on Github and click on the &amp;ldquo;Fork&amp;rdquo; button in the top right.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://gohugo.io/img/tutorials/how-to-contribute-to-hugo/forking-a-repository.png&#34; alt=&#34;Fork button&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now open your fork repository on GitHub and copy the remote url of your fork. You can choose between HTTPS and SSH as protocol that Git should use for the following operations. HTTPS works always &lt;a href=&#34;https://help.github.com/articles/which-remote-url-should-i-use/&#34;&gt;if you&amp;rsquo;re not sure&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://gohugo.io/img/tutorials/how-to-contribute-to-hugo/copy-remote-url.png&#34; alt=&#34;Copy remote url&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Switch back to the terminal and move into the directory of the cloned master repository from the last step.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd $GOPATH/src/github.com/spf13/hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now Git needs to know that our fork exists by adding the copied remote url:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git remote add &amp;lt;YOUR-GITHUB-USERNAME&amp;gt; &amp;lt;COPIED REMOTE-URL&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;fork-with-hub&#34;&gt;Fork with Hub&lt;/h4&gt;

&lt;p&gt;Alternatively, you can use the Git wrapper Hub. Hub makes forking a repository easy:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git fork
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That command will log in to GitHub using your account, create a fork of the repository that you&amp;rsquo;re currently working in, and add it as a remote to your working copy.&lt;/p&gt;

&lt;h4 id=&#34;trust-but-verify&#34;&gt;Trust, but verify&lt;/h4&gt;

&lt;p&gt;Let&amp;rsquo;s check if everything went right by listing all known remotes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git remote -v
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output should look similar:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;digitalcraftsman	git@github.com:digitalcraftsman/hugo.git (fetch)
digitalcraftsman	git@github.com:digitalcraftsman/hugo.git (push)
origin	https://github.com/spf13/hugo (fetch)
origin	https://github.com/spf13/hugo (push)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;the-contribution-workflow&#34;&gt;The contribution workflow&lt;/h2&gt;

&lt;h3 id=&#34;create-a-new-branch&#34;&gt;Create a new branch&lt;/h3&gt;

&lt;p&gt;You should never develop against the &amp;ldquo;master&amp;rdquo; branch. The development team will not accept a pull request against that branch. Instead, create a descriptive named branch and work on it.&lt;/p&gt;

&lt;p&gt;First, you should always pull the latest changes from the master repository:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git checkout master
git pull
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can create a new branch for your additions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git checkout -b &amp;lt;BRANCH-NAME&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can check on which branch your are with &lt;code&gt;git branch&lt;/code&gt;. You should see a list of all local branches. The current branch is indicated with a little asterisk.&lt;/p&gt;

&lt;h3 id=&#34;contributing-to-the-documentation&#34;&gt;Contributing to the documentation&lt;/h3&gt;

&lt;p&gt;Perhaps you want to start contributing to the docs. Then you can ignore most of the following steps. You can find the documentation within the cloned repository in the subfolder &lt;code&gt;docs&lt;/code&gt;. Change the directory with &lt;code&gt;cd docs&lt;/code&gt;. Install the &lt;a href=&#34;http://gohugo.io/overview/installing/&#34;&gt;latest release&lt;/a&gt;. Or read on and build Hugo from source.&lt;/p&gt;

&lt;p&gt;You can start Hugo&amp;rsquo;s built-in server via &lt;code&gt;hugo server&lt;/code&gt;. Browse the documentation by entering &lt;a href=&#34;http://localhost:1313&#34;&gt;http://localhost:1313&lt;/a&gt; in the address bar of your browser. The server automatically updates the page if you change its content.&lt;/p&gt;

&lt;h3 id=&#34;building-hugo&#34;&gt;Building Hugo&lt;/h3&gt;

&lt;p&gt;While making changes in the codebase it&amp;rsquo;s a good idea to build the binary to test them:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go build -o hugo main.go
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;testing&#34;&gt;Testing&lt;/h3&gt;

&lt;p&gt;Sometimes changes on the codebase can cause unintended side effects. Or they don&amp;rsquo;t work as expected. Most functions have their own test cases. You can find them in files ending with &lt;code&gt;_test.go&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Make sure the commands &lt;code&gt;go test ./...&lt;/code&gt; passes, and &lt;code&gt;go build&lt;/code&gt; completes.&lt;/p&gt;

&lt;h3 id=&#34;formatting&#34;&gt;Formatting&lt;/h3&gt;

&lt;p&gt;The Go code styleguide maybe is opiniated but it ensures that the codebase looks the same, regardless who wrote the code. Go comes with its own formatting tool. Let&amp;rsquo;s apply the styleguide to our addtions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go fmt ./...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you made your additions commit your changes. Make sure that you follow our &lt;a href=&#34;https://github.com/spf13/hugo/blob/master/CONTRIBUTING.md&#34;&gt;code contribution guidelines&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Add all changed files
git add --all
git commit --message &amp;quot;YOUR COMMIT MESSAGE&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The commit message should describe what the commit does (e.g. add feature XYZ), not how it is done.&lt;/p&gt;

&lt;h3 id=&#34;modify-commits&#34;&gt;Modify commits&lt;/h3&gt;

&lt;p&gt;You noticed some commit messages don&amp;rsquo;t fulfill the code contribution guidelines or you just forget something to add some files? No problem. Git provides the necessary tools to fix such problems. The next two methods cover all common cases.&lt;/p&gt;

&lt;p&gt;If you are unsure what a command does leave the commit as it is. We can fix your commits later in the pull request.&lt;/p&gt;

&lt;h4 id=&#34;modifying-the-last-commit&#34;&gt;Modifying the last commit&lt;/h4&gt;

&lt;p&gt;Let&amp;rsquo;s say you want to modify the last commit message. Run the following command and replace the current message:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git commit --amend -m&amp;quot;YOUR NEW COMMIT MESSAGE&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Take a look at the commit log to see the change:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git log
# Exit with q
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After making the last commit you may forgot something. There is no need to create a new commit. Just add the latest changes and merge them into the intended commit:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git add --all
git commit --amend
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;modifying-multiple-commits&#34;&gt;Modifying multiple commits&lt;/h4&gt;

&lt;p&gt;This is a bit more advanced. Git allows you to &lt;a href=&#34;https://git-scm.com/docs/git-rebase&#34;&gt;rebase&lt;/a&gt; commits interactively. In other words: it allows you to rewrite the commit history. &lt;strong&gt;Take care of your actions. They can cause unintended changes. Skip this section if you&amp;rsquo;re not sure!&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git rebase --interactive @~6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;6&lt;/code&gt; at the end of the command represents the number of commits that should be modified. An editor should open and present a list of last six commit messages:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pick 80d02a1 tpl: Add hasPrefix to the template funcs&#39; &amp;quot;smoke test&amp;quot;
pick aaee038 tpl: Sort the smoke tests
pick f0dbf2c tpl: Add the other test case for hasPrefix
pick 911c35b Add &amp;quot;How to contribute to Hugo&amp;quot; tutorial
pick 33c8973 Begin workflow
pick 3502f2e Refactoring and typo fixes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the case above we should merge the last to commits in the commit of this tutorial (&lt;code&gt;Add &amp;quot;How to contribute to Hugo&amp;quot; tutorial&lt;/code&gt;). You can &amp;ldquo;squash&amp;rdquo; commits, i.e. merge two or more commits into a single one.&lt;/p&gt;

&lt;p&gt;All operations are written before the commit message. Replace &amp;ldquo;pick&amp;rdquo; with an operation. In this case &lt;code&gt;squash&lt;/code&gt; or &lt;code&gt;s&lt;/code&gt; for short:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pick 80d02a1 tpl: Add hasPrefix to the template funcs&#39; &amp;quot;smoke test&amp;quot;
pick aaee038 tpl: Sort the smoke tests
pick f0dbf2c tpl: Add the other test case for hasPrefix
pick 911c35b Add &amp;quot;How to contribute to Hugo&amp;quot; tutorial
squash 33c8973 Begin workflow
squash 3502f2e Refactoring and typo fixes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We also want to rewrite the commits message of the third last commit. We forgot &amp;ldquo;docs:&amp;rdquo; as prefix according to the code contribution guidelines. The operation to rewrite a commit is called &lt;code&gt;reword&lt;/code&gt; (or &lt;code&gt;r&lt;/code&gt; as shortcut).&lt;/p&gt;

&lt;p&gt;You should end up with a similar setup:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pick 80d02a1 tpl: Add hasPrefix to the template funcs&#39; &amp;quot;smoke test&amp;quot;
pick aaee038 tpl: Sort the smoke tests
pick f0dbf2c tpl: Add the other test case for hasPrefix
reword 911c35b Add &amp;quot;How to contribute to Hugo&amp;quot; tutorial
squash 33c8973 Begin workflow
squash 3502f2e Refactoring and typo fixes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Close the editor. It should open again with a new tab. A text is instructing you to define a new commit message for the last two commits that should be merged (a.k.a. squashed). Save the file (&lt;kbd&gt;CTRL&lt;/kbd&gt;+&lt;kbd&gt;S&lt;/kbd&gt;) and close the editor again.&lt;/p&gt;

&lt;p&gt;A last time a new tab opens. Enter a new commit message and save again. Your terminal should contain a status message. Hopefully this one:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Successfully rebased and updated refs/heads/&amp;lt;BRANCHNAME&amp;gt;.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Check the commit log if everything looks as expected. Should an error occur you can abort this rebase with &lt;code&gt;git rebase --abort&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;push-commits&#34;&gt;Push commits&lt;/h3&gt;

&lt;p&gt;To push our commits to the fork on GitHub we need to speficy a destination. A destination is defined by the remote and a branch name. Earlier, the defined that the remote url of our fork is the same as our GitHub handle, in my case &lt;code&gt;digitalcraftsman&lt;/code&gt;. The branch should have the same as our local one. This makes it easy to identify corresponding branches.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git push --set-upstream &amp;lt;YOUR-GITHUB-USERNAME&amp;gt; &amp;lt;BRANCHNAME&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now Git knows the destination. Next time when you to push commits you just need to enter &lt;code&gt;git push&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you modified your commit history in the last step GitHub will reject your try to push. This is a safety-feature because the commit history isn&amp;rsquo;t the same and new commits can&amp;rsquo;t be appended as usual. You can enforce this push explicitly with &lt;code&gt;git push --force&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;open-a-pull-request&#34;&gt;Open a pull request&lt;/h2&gt;

&lt;p&gt;We made a lot of progress. Good work. In this step we finally open a pull request to submit our additions. Open the &lt;a href=&#34;https://github.com/spf13/hugo/&#34;&gt;Hugo master repository&lt;/a&gt; on GitHub in your browser.&lt;/p&gt;

&lt;p&gt;You should find a green button labeld with &amp;ldquo;New pull request&amp;rdquo;. But GitHub is clever and probably suggests you a pull request like in the beige box below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://gohugo.io/img/tutorials/how-to-contribute-to-hugo/open-pull-request.png&#34; alt=&#34;Open a pull request&#34;&gt;&lt;/p&gt;

&lt;p&gt;The new page summaries the most important information of your pull request. Scroll down and you find the additions of all your commits. Make sure everything looks as expected and click on &amp;ldquo;Create pull request&amp;rdquo;.&lt;/p&gt;

&lt;h3 id=&#34;accept-the-contributor-license-agreement&#34;&gt;Accept the contributor license agreement&lt;/h3&gt;

&lt;p&gt;Last but not least you should accept the contributor license agreement (CLA). A new comment should be added automatically to your pull request. Click on the yellow badge, accept the agreement and authenticate yourself with your GitHub account. It just takes a few clicks and only needs to be done once.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://gohugo.io/img/tutorials/how-to-contribute-to-hugo/accept-cla.png&#34; alt=&#34;Accept the CLA&#34;&gt;&lt;/p&gt;

&lt;h3 id=&#34;automatic-builds&#34;&gt;Automatic builds&lt;/h3&gt;

&lt;p&gt;We use the &lt;a href=&#34;https://travis-ci.org/spf13/hugo&#34;&gt;Travis CI loop&lt;/a&gt; (Linux and OS&amp;nbsp;X) and &lt;a href=&#34;https://ci.appveyor.com/project/spf13/hugo/branch/master&#34;&gt;AppVeyor&lt;/a&gt; (Windows) to compile Hugo with your additions. This should ensure that everything works as expected before merging your pull request. This in most cases only relevant if you made changes to the codebase of Hugo.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://gohugo.io/img/tutorials/how-to-contribute-to-hugo/ci-errors.png&#34; alt=&#34;Automic builds and their status&#34;&gt;&lt;/p&gt;

&lt;p&gt;Above you can see that Travis wasn&amp;rsquo;t able to compile the changes in this pull request. Click on &amp;ldquo;Details&amp;rdquo; and try to investigate why the build failed. But it doesn&amp;rsquo;t have to be your fault. Mostly, the &lt;code&gt;master&lt;/code&gt; branch that we used as foundation for your pull request should build without problems.&lt;/p&gt;

&lt;p&gt;If you have questions leave a comment in the pull request. We are willing to assist you.&lt;/p&gt;

&lt;h2 id=&#34;where-to-start&#34;&gt;Where to start?&lt;/h2&gt;

&lt;p&gt;Thank you for reading this tutorial. Hopefully, we see you again on GitHub. There are plenty of &lt;a href=&#34;https://github.com/spf13/hugo/issues&#34;&gt;open issues&lt;/a&gt; on GitHub. Feel free to open an issue if you think you found a bug or you have a new idea to improve Hugo. We are happy to hear from you.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Creating a New Theme</title>
      <link>http://gohugo.io/tutorials/creating-a-new-theme/</link>
      <pubDate>Thu, 26 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>http://gohugo.io/tutorials/creating-a-new-theme/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;This tutorial will show you how to create a simple theme in Hugo.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll introduce Hugo&amp;rsquo;s use of templates,
and explain how to organize them into a theme.
The theme will grow, minimizing effort while meeting evolving needs.
To promote this focus, and to keep everything simple, I&amp;rsquo;ll omit CSS styling.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll start by creating a tiny, blog-like web site.
We&amp;rsquo;ll implement this blog with just one &amp;mdash; quite basic &amp;mdash; template.
Then we&amp;rsquo;ll add an About page, and a few articles.
Overall, this web site (along with what you learn here)
will provide a good basis for you to continue working with Hugo in the future.
By making small variations,
you&amp;rsquo;ll be able to create many different kinds of web sites.&lt;/p&gt;

&lt;p&gt;I will assume you&amp;rsquo;re comfortable with HTML, Markdown formatting,
and the Bash command line (possibly using &lt;a href=&#34;https://git-for-windows.github.io/&#34;&gt;Git for
Windows&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;A few symbols might call for explanation: in this tutorial,
the commands you&amp;rsquo;ll enter will be preceded by a &lt;code&gt;$&lt;/code&gt; prompt &amp;mdash;
and their output will follow.
&lt;code&gt;vi&lt;/code&gt; means to open your editor; then &lt;code&gt;:wq&lt;/code&gt; means to save the file.
Sometimes I&amp;rsquo;ll add comments to explain a point &amp;mdash; these start with &lt;code&gt;#&lt;/code&gt;.
So, for example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# this is a comment
$ echo this is a command
this is a command

# edit the file
$ vi foo.md
+++
date = &amp;quot;2040-01-18&amp;quot;
title = &amp;quot;creating a new theme&amp;quot;

+++
Bah! Humbug!
:wq

# show it
$ cat foo.md
+++
date = &amp;quot;2040-01-18&amp;quot;
title = &amp;quot;creating a new theme&amp;quot;

+++
Bah! Humbug!
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;definitions&#34;&gt;Definitions&lt;/h2&gt;

&lt;p&gt;Three concepts:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;em&gt;Non-content&lt;/em&gt; files;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Templates&lt;/em&gt; (as Hugo defines them); and&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Front-matter&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;are essential for creating your first Hugo theme,
as well as your first Hugo website.&lt;/p&gt;

&lt;h3 id=&#34;non-content&#34;&gt;Non-Content&lt;/h3&gt;

&lt;p&gt;The source files of a web site (destined to be rendered by Hugo)
are divided into two kinds:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The files containing its textual content (and nothing else &amp;mdash;
except Hugo front-matter: see below, and Markdown styling); and&lt;/li&gt;
&lt;li&gt;All other files. (These contain &lt;strong&gt;&lt;em&gt;no&lt;/em&gt;&lt;/strong&gt; textual content &amp;mdash; ideally.)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Temporarily, let&amp;rsquo;s affix the adjective &lt;em&gt;non-content&lt;/em&gt;
to the latter kind of source files.&lt;/p&gt;

&lt;p&gt;Non-content files are responsible for your web site&amp;rsquo;s look and feel.
(Follow these article links from &lt;a href=&#34;https://www.bopdesign.com/bop-blog/2013/11/what-is-the-look-and-feel-of-a-website-and-why-its-important/&#34;&gt;Bop
Design&lt;/a&gt;
and
&lt;a href=&#34;https://en.wikipedia.org/w/index.php?title=Look_and_feel&amp;amp;oldid=731052704&#34;&gt;Wikipedia&lt;/a&gt;
if you wish for more information.)
They comprise its images, its CSS (for the sizes, colors and fonts),
its JavaScript (for the actions and reactions), and its Hugo templates
(which contain the rules Hugo uses to transform your content into HTML).&lt;/p&gt;

&lt;p&gt;Given these files, Hugo will render a static web site &amp;mdash;
informed by your content &amp;mdash;
which contains the above images, HTML, CSS and JavaScript,
ready to be served to visitors.&lt;/p&gt;

&lt;p&gt;Actually, a few of your invariant textual snippets
could reside in non-content files as well.
However, because someone might reuse your theme (eventually),
preferably you should keep those textual snippets in their own content files.&lt;/p&gt;

&lt;h4 id=&#34;where&#34;&gt;Where&lt;/h4&gt;

&lt;p&gt;Regarding where to create your non-content files, you have two options.
The simplest is the &lt;code&gt;./layouts/&lt;/code&gt; and &lt;code&gt;./static/&lt;/code&gt; filesystem trees.
If you choose this way,
then you needn&amp;rsquo;t worry about configuring Hugo to find them.
Invariably, these are the first two places Hugo seeks for templates
(as well as images, CSS and JavaScript);
so in that case, it&amp;rsquo;s guaranteed to find all your non-content files.&lt;/p&gt;

&lt;p&gt;The second option is to create them in a filesystem tree
located somewhere under the &lt;code&gt;./themes/&lt;/code&gt; directory.
If you choose that way,
then you must always tell Hugo where to search for them &amp;mdash;
that&amp;rsquo;s extra work, though. So, why bother?&lt;/p&gt;

&lt;h4 id=&#34;theme&#34;&gt;Theme&lt;/h4&gt;

&lt;p&gt;Well &amp;mdash; the difference between creating your non-content files under
&lt;code&gt;./layouts/&lt;/code&gt; and &lt;code&gt;./static/&lt;/code&gt; and creating them under &lt;code&gt;./themes/&lt;/code&gt;
is admittedly very subtle.
Non-content files created under &lt;code&gt;./layouts/&lt;/code&gt; and &lt;code&gt;./static/&lt;/code&gt;
cannot be customized without editing them directly.
On the other hand, non-content files created under &lt;code&gt;./themes/&lt;/code&gt;
can be customized, in another way. That way is both conventional
(for Hugo web sites) and non-destructive. Therefore,
creating your non-content files under &lt;code&gt;./themes/&lt;/code&gt;
makes it easier for other people to use them.&lt;/p&gt;

&lt;p&gt;The rest of this tutorial will call a set of non-content files a &lt;strong&gt;&lt;em&gt;theme&lt;/em&gt;&lt;/strong&gt;
if they comprise a filesystem tree rooted anywhere under the
&lt;code&gt;./themes/&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;Note that you can use this tutorial to create your set of non-content files
under &lt;code&gt;./layouts/&lt;/code&gt; and &lt;code&gt;./static/&lt;/code&gt; if you wish. The only difference is that
you wouldn&amp;rsquo;t need to edit your web site&amp;rsquo;s configuration file
in order to select a theme.&lt;/p&gt;

&lt;h3 id=&#34;home&#34;&gt;Home&lt;/h3&gt;

&lt;p&gt;The home page, or landing page,
is the first page that many visitors to a web site will see.
Often this is &lt;code&gt;/index.html&lt;/code&gt;, located at the root URL of the web site.
Since Hugo writes files into the &lt;code&gt;./public/&lt;/code&gt; tree,
your home page will reside in file &lt;code&gt;./public/index.html&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;configure&#34;&gt;Configure&lt;/h3&gt;

&lt;p&gt;When Hugo runs, it first looks for an overall configuration file,
in order to read its settings, and applies them to the entire web site.
These settings override Hugo&amp;rsquo;s default values.&lt;/p&gt;

&lt;p&gt;The file can be in TOML, YAML, or JSON format.
I prefer TOML for my configuration files.
If you prefer JSON or YAML, you&amp;rsquo;ll need to translate my examples.
You&amp;rsquo;ll also need to change the basename, since Hugo uses its extension
to determine how to process it.&lt;/p&gt;

&lt;p&gt;Hugo translates Markdown files into HTML.
By default, Hugo searches for Markdown files in the &lt;code&gt;./content/&lt;/code&gt; tree
and template files under the &lt;code&gt;./themes/&lt;/code&gt; directory.
It will render HTML files to the &lt;code&gt;./public/&lt;/code&gt; tree.
You can override any of these defaults by specifying alternative locations
in the configuration file.&lt;/p&gt;

&lt;h3 id=&#34;template&#34;&gt;Template&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Templates&lt;/em&gt; direct Hugo in rendering content into HTML;
they bridge content and presentation.&lt;/p&gt;

&lt;p&gt;Rules in template files determine which content is published and where,
and precisely how it will be rendered into HTML files.
Templates also guide your web site&amp;rsquo;s presentation
by specifying the CSS styling to use.&lt;/p&gt;

&lt;p&gt;Hugo uses its knowledge of each piece of content
to seek a template file to use in rendering it.
If it can&amp;rsquo;t find a template that matches the content, it will zoom out,
one conceptual level; it will then resume the search from there.
It will continue to do so, till it finds a matching template,
or runs out of templates to try.
Its last resort is your web site&amp;rsquo;s default template,
which could conceivably be missing. If it finds no suitable template,
it simply forgoes rendering that piece of content.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s important to note that &lt;em&gt;front-matter&lt;/em&gt; (see next)
can influence Hugo&amp;rsquo;s template file selection process.&lt;/p&gt;

&lt;h3 id=&#34;content&#34;&gt;Content&lt;/h3&gt;

&lt;p&gt;Content is stored in text files which contain two sections.
The first is called &lt;em&gt;front-matter&lt;/em&gt;: this is information about the content.
The second contains Markdown-formatted text,
destined for conversion to HTML format.&lt;/p&gt;

&lt;h4 id=&#34;front-matter&#34;&gt;Front-Matter&lt;/h4&gt;

&lt;p&gt;The &lt;em&gt;front-matter&lt;/em&gt; is meta-information describing the content.
Like the web site&amp;rsquo;s configuration file, it can be written in the
TOML, YAML, or JSON formats.
Unlike the configuration file, Hugo doesn&amp;rsquo;t use the file&amp;rsquo;s extension
to determine the format.
Instead, it looks for markers in the file which signal this.
TOML is surrounded by &amp;ldquo;&lt;code&gt;+++&lt;/code&gt;&amp;rdquo; and YAML by &amp;ldquo;&lt;code&gt;---&lt;/code&gt;&amp;rdquo;, but
JSON is enclosed in curly braces. I prefer to use TOML.
You&amp;rsquo;ll need to translate my examples if you prefer YAML or JSON.&lt;/p&gt;

&lt;p&gt;Hugo informs its chosen template files with the front-matter information
before rendering the content in HTML.&lt;/p&gt;

&lt;h4 id=&#34;markdown&#34;&gt;Markdown&lt;/h4&gt;

&lt;p&gt;Content is written in Markdown format, which makes it easy to create.
Hugo runs the content through a Markdown engine to transform it into HTML,
which it then renders to the output file.&lt;/p&gt;

&lt;h3 id=&#34;template-kinds&#34;&gt;Template Kinds&lt;/h3&gt;

&lt;p&gt;Here I&amp;rsquo;ll discuss three kinds of Hugo templates:
&lt;em&gt;Single&lt;/em&gt;, &lt;em&gt;List&lt;/em&gt;, and &lt;em&gt;Partial&lt;/em&gt;.
All these kinds take one or more pieces of content as input,
and transform the pieces, based on commands in the template.&lt;/p&gt;

&lt;h4 id=&#34;single&#34;&gt;Single&lt;/h4&gt;

&lt;p&gt;A &lt;em&gt;Single&lt;/em&gt; template is used to render one piece of content.
For example, an article or a post is a single piece of content;
thus, it uses a Single template.&lt;/p&gt;

&lt;h4 id=&#34;list&#34;&gt;List&lt;/h4&gt;

&lt;p&gt;A &lt;em&gt;List&lt;/em&gt; template renders a group of related content items.
This could be a summary of recent postings,
or all of the articles in a category.
List templates can contain multiple groups (or categories).&lt;/p&gt;

&lt;p&gt;The home page template is a special kind of List template.
This is because Hugo assumes that your home page will act as a portal
to all of the remaining content on your web site.&lt;/p&gt;

&lt;h4 id=&#34;partial&#34;&gt;Partial&lt;/h4&gt;

&lt;p&gt;A &lt;em&gt;Partial&lt;/em&gt; template is a template that&amp;rsquo;s incapable of producing a web page,
by itself. To include a Partial template in your web site,
another template must call it, using the &lt;code&gt;partial&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;Partial templates are very handy for rolling up common behavior.
For example, you might want the same banner to appear on all
of your web site&amp;rsquo;s pages &amp;mdash; so, rather than copy your banner&amp;rsquo;s text
into multiple content files,
as well as the other information relevant to your banner
into multiple template files (both Single and List),
you can instead create just one content file and one Partial template.
That way, whenever you decide to change the banner, you can do so
by editing one file only (or maybe two).&lt;/p&gt;

&lt;h2 id=&#34;site&#34;&gt;Site&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s let Hugo help you create your new web site.
The &lt;code&gt;hugo new site&lt;/code&gt; command will generate a skeleton &amp;mdash;
it will give you a basic directory structure, along with
a usable configuration file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd /tmp/

$ hugo new site mySite

$ cd mySite/

$ ls -l
total 8
drwxr-xr-x  2 {user} {group}   68 {date} archetypes
-rw-r--r--  1 {user} {group}  107 {date} config.toml
drwxr-xr-x  2 {user} {group}   68 {date} content
drwxr-xr-x  2 {user} {group}   68 {date} data
drwxr-xr-x  2 {user} {group}   68 {date} layouts
drwxr-xr-x  2 {user} {group}   68 {date} static
drwxr-xr-x  2 {user} {group}   68 {date} themes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Take a look in the &lt;code&gt;./content/&lt;/code&gt; and &lt;code&gt;./themes/&lt;/code&gt; directories to confirm
they are empty.&lt;/p&gt;

&lt;p&gt;The other directories
(&lt;code&gt;./archetypes/&lt;/code&gt;, &lt;code&gt;./data/&lt;/code&gt;, &lt;code&gt;./layouts/&lt;/code&gt; and &lt;code&gt;./static/&lt;/code&gt;)
are used for customizing a named theme.
That&amp;rsquo;s a topic for a different tutorial, so please ignore them for now.&lt;/p&gt;

&lt;h3 id=&#34;render&#34;&gt;Render&lt;/h3&gt;

&lt;p&gt;Running the &lt;code&gt;hugo&lt;/code&gt; command with no options will read
all of the available content and render the HTML files. Also, it will copy
all the static files (that&amp;rsquo;s everything besides content).
Since we have an empty web site, Hugo won&amp;rsquo;t be doing much.
However, generally speaking, Hugo does this very quickly:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ hugo --verbose
INFO: {date} {source} Using config file: /tmp/mySite/config.toml
WARN: {date} {source} No theme set
INFO: {date} {source} /tmp/mySite/static/ is the only static directory available to sync from
INFO: {date} {source} syncing static files to /tmp/mySite/public/
Started building site
WARN: {date} {source} Unable to locate layout for homepage: [index.html _default/list.html]
WARN: {date} {source} &amp;quot;/&amp;quot; is rendered empty
=============================================================
Your rendered home page is blank: /index.html is zero-length
 * Did you specify a theme on the command-line or in your
   &amp;quot;config.toml&amp;quot; file?  (Current theme: &amp;quot;&amp;quot;)
=============================================================
WARN: {date} {source} Unable to locate layout for 404 page: [404.html]
WARN: {date} {source} &amp;quot;404.html&amp;quot; is rendered empty
0 draft content
0 future content
0 expired content
0 pages created
0 non-page files copied
0 paginator pages created
0 tags created
0 categories created
in 4 ms
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &amp;ldquo;&lt;code&gt;--verbose&lt;/code&gt;&amp;rdquo; flag gives extra information that will be helpful
whenever we are developing a template.
Every line of the output starting with &amp;ldquo;INFO:&amp;rdquo; or &amp;ldquo;WARN:&amp;rdquo; is present
because we used that flag. The lines that start with &amp;ldquo;WARN:&amp;rdquo;
are warning messages. We&amp;rsquo;ll go over them later.&lt;/p&gt;

&lt;p&gt;We can verify that the command worked by looking at the directory again:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ls -l
total 8
drwxr-xr-x  2 {user} {group}   68 {date} archetypes
-rw-r--r--  1 {user} {group}  107 {date} config.toml
drwxr-xr-x  2 {user} {group}   68 {date} content
drwxr-xr-x  2 {user} {group}   68 {date} data
drwxr-xr-x  2 {user} {group}   68 {date} layouts
drwxr-xr-x  6 {user} {group}  204 {date} public
drwxr-xr-x  2 {user} {group}   68 {date} static
drwxr-xr-x  2 {user} {group}   68 {date} themes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See that new &lt;code&gt;./public/&lt;/code&gt; directory?
Hugo placed all its rendered content there.
When you&amp;rsquo;re ready to publish your web site, that&amp;rsquo;s the place to start.
For now, though, let&amp;rsquo;s just confirm we have the files we expect
for a web site with no content:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ls -l public/
total 16
-rw-r--r--  1 {user} {group}    0 {date} 404.html
-rw-r--r--  1 {user} {group}    0 {date} index.html
-rw-r--r--  1 {user} {group}  511 {date} index.xml
-rw-r--r--  1 {user} {group}  210 {date} sitemap.xml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hugo rendered two XML files and some empty HTML files.
The XML files are used for RSS feeds. Hugo has an opinion about what
those feeds should contain, so it populated those files.
Hugo has no opinion on the look or content of your web site,
so it left those files empty.&lt;/p&gt;

&lt;p&gt;If you look back at the output from the &lt;code&gt;hugo server&lt;/code&gt; command,
you&amp;rsquo;ll notice that Hugo said:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;0 pages created
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s because Hugo doesn&amp;rsquo;t count the home page, the 404 error page,
or the RSS feed files as pages.&lt;/p&gt;

&lt;h3 id=&#34;serve&#34;&gt;Serve&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s verify you can run the built-in web server &amp;mdash;
that&amp;rsquo;ll shorten your development cycle, dramatically.
Start it, by running the &lt;code&gt;hugo server&lt;/code&gt; command.
If successful, you&amp;rsquo;ll see output similar to the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ hugo server --verbose
INFO: {date} {source} Using config file: /tmp/mySite/config.toml
WARN: {date} {source} No theme set
INFO: {date} {source} /tmp/mySite/static/ is the only static directory available to sync from
INFO: {date} {source} syncing static files to /
WARN: {date} {source} Unable to locate layout for homepage: [index.html _default/list.html]
WARN: {date} {source} &amp;quot;/&amp;quot; is rendered empty
=============================================================
Your rendered home page is blank: /index.html is zero-length
 * Did you specify a theme on the command-line or in your
   &amp;quot;config.toml&amp;quot; file?  (Current theme: &amp;quot;&amp;quot;)
=============================================================
WARN: {date} {source} Unable to locate layout for 404 page: [404.html]
WARN: {date} {source} &amp;quot;404.html&amp;quot; is rendered empty
0 draft content
0 future content
0 expired content
0 pages created
0 non-page files copied
0 paginator pages created
0 tags created
0 categories created
in 3 ms
Watching for changes in /tmp/mySite/{data,content,layouts,static}
Serving pages from memory
Web Server is available at http://localhost:1313/ (bind address 127.0.0.1)
Press Ctrl+C to stop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Connect to the listed URL (it&amp;rsquo;s on the line that begins with
&lt;code&gt;Web Server is available&lt;/code&gt;). If everything&amp;rsquo;s working correctly,
you should get a page that shows nothing.&lt;/p&gt;

&lt;h3 id=&#34;warnings&#34;&gt;Warnings&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s go back and look at some of those warnings again:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;WARN: {date} {source} Unable to locate layout for 404 page: [404.html]
WARN: {date} {source} Unable to locate layout for homepage: [index.html _default/list.html]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The 404 warning is easy to explain &amp;mdash; it&amp;rsquo;s because we haven&amp;rsquo;t created
the template file &lt;code&gt;layouts/404.html&lt;/code&gt;. Hugo uses this to render an HTML file
which serves &amp;ldquo;page not found&amp;rdquo; errors. However,
the 404 page is a topic for a separate tutorial.&lt;/p&gt;

&lt;p&gt;Regarding the home page warning: the first layout Hugo looked for was
&lt;code&gt;layouts/index.html&lt;/code&gt;. Note that Hugo uses this file for the home page only.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s good that Hugo lists the files it seeks, when
we give it the verbose flag. For the home page, these files are
&lt;code&gt;layouts/index.html&lt;/code&gt; and &lt;code&gt;layouts/_default/list.html&lt;/code&gt;.
Later, we&amp;rsquo;ll cover some rules which explain these paths
(including their basenames). For now, just remember that
Hugo couldn&amp;rsquo;t find a template to use for the home page, and it said so.&lt;/p&gt;

&lt;p&gt;All right! So, now &amp;mdash; after these few steps &amp;mdash; you have a working
installation, and a web site foundation you can build upon.
All that&amp;rsquo;s left is to add some content, as well as a theme to display it.&lt;/p&gt;

&lt;h2 id=&#34;theme-1&#34;&gt;Theme&lt;/h2&gt;

&lt;p&gt;Hugo doesn&amp;rsquo;t ship with a default theme. However, a large number of themes
are easily available: for example, at
&lt;a href=&#34;https://github.com/spf13/hugoThemes&#34;&gt;hugoThemes&lt;/a&gt;.
Also, Hugo comes with a command to generate them.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re going to generate a new theme called Zafta.
The goal of this tutorial is simply to show you how to create
(in a theme) the minimal files Hugo needs in order to display your content.
Therefore, the theme will exclude CSS &amp;mdash;
it&amp;rsquo;ll be functional, not beautiful.&lt;/p&gt;

&lt;p&gt;Every theme has its own opinions on content and layout. For example, this
Zafta theme prefers the Type &amp;ldquo;article&amp;rdquo; over the Types &amp;ldquo;blog&amp;rdquo; or &amp;ldquo;post.&amp;rdquo;
Strong opinions make for simpler templates, but unconventional opinions
make themes tougher for other users. So when you develop a theme, you should
consider the value of adopting the terms used by themes similar to yours.&lt;/p&gt;

&lt;h3 id=&#34;skeleton&#34;&gt;Skeleton&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s press Ctrl+C and use the &lt;code&gt;hugo new theme&lt;/code&gt; command
to generate the skeleton of a theme. The result is a directory structure
containing empty files for you to fill out:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ hugo new theme zafta

$ find themes -type f | xargs ls -l
-rw-r--r--  1 {user} {group}     8 {date} themes/zafta/archetypes/default.md
-rw-r--r--  1 {user} {group}     0 {date} themes/zafta/layouts/404.html
-rw-r--r--  1 {user} {group}     0 {date} themes/zafta/layouts/_default/list.html
-rw-r--r--  1 {user} {group}     0 {date} themes/zafta/layouts/_default/single.html
-rw-r--r--  1 {user} {group}     0 {date} themes/zafta/layouts/index.html
-rw-r--r--  1 {user} {group}     0 {date} themes/zafta/layouts/partials/footer.html
-rw-r--r--  1 {user} {group}     0 {date} themes/zafta/layouts/partials/header.html
-rw-r--r--  1 {user} {group}  1081 {date} themes/zafta/LICENSE.md
-rw-r--r--  1 {user} {group}   450 {date} themes/zafta/theme.toml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The skeleton includes templates (files ending in &lt;code&gt;.html&lt;/code&gt;), a license file,
a description of your theme (&lt;code&gt;theme.toml&lt;/code&gt;), and a default archetype file.&lt;/p&gt;

&lt;p&gt;When you&amp;rsquo;re developing a real theme, please remember to fill out files
&lt;code&gt;theme.toml&lt;/code&gt; and &lt;code&gt;LICENSE.md&lt;/code&gt;. They&amp;rsquo;re optional, but if you&amp;rsquo;re going to
distribute your theme, it tells the world who to praise (or blame).
It&amp;rsquo;s also important to declare your choice of license, so people will know
whether (or where) they can use your theme.&lt;/p&gt;

&lt;p&gt;Note that the skeleton theme&amp;rsquo;s template files are empty. Don&amp;rsquo;t worry;
we&amp;rsquo;ll change that shortly:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ find themes/zafta -name &#39;*.html&#39; | xargs ls -l
-rw-r--r--  1 {user} {group}  0 {date} themes/zafta/layouts/404.html
-rw-r--r--  1 {user} {group}  0 {date} themes/zafta/layouts/_default/list.html
-rw-r--r--  1 {user} {group}  0 {date} themes/zafta/layouts/_default/single.html
-rw-r--r--  1 {user} {group}  0 {date} themes/zafta/layouts/index.html
-rw-r--r--  1 {user} {group}  0 {date} themes/zafta/layouts/partials/footer.html
-rw-r--r--  1 {user} {group}  0 {date} themes/zafta/layouts/partials/header.html
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;select&#34;&gt;Select&lt;/h3&gt;

&lt;p&gt;Now that we&amp;rsquo;ve created a theme we can work with, it&amp;rsquo;s a good idea
to add its name to the configuration file. This is optional, because
it&amp;rsquo;s possible to add &amp;ldquo;-t zafta&amp;rdquo; to all your commands.
I like to put it in the configuration file because I like
shorter command lines. If you don&amp;rsquo;t put it in the configuration file,
or specify it on the command line, sometimes you won&amp;rsquo;t get the template
you&amp;rsquo;re expecting.&lt;/p&gt;

&lt;p&gt;So, let&amp;rsquo;s edit your configuration file to add the theme name:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;$ vi config.toml
theme = &amp;quot;zafta&amp;quot;
baseURL = &amp;quot;http://example.org/&amp;quot;
title = &amp;quot;My New Hugo Site&amp;quot;
languageCode = &amp;quot;en-us&amp;quot;
:wq
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;themed-render&#34;&gt;Themed Render&lt;/h3&gt;

&lt;p&gt;Now that we have a theme (albeit empty), let&amp;rsquo;s render the web site again:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ hugo --verbose
INFO: {date} {source} Using config file: /tmp/mySite/config.toml
INFO: {date} {source} using a UnionFS for static directory comprised of:
INFO: {date} {source} Base: /tmp/mySite/themes/zafta/static
INFO: {date} {source} Overlay: /tmp/mySite/static/
INFO: {date} {source} syncing static files to /tmp/mySite/public/
Started building site
WARN: {date} {source} &amp;quot;/&amp;quot; is rendered empty
=============================================================
Your rendered home page is blank: /index.html is zero-length
 * Did you specify a theme on the command-line or in your
   &amp;quot;config.toml&amp;quot; file?  (Current theme: &amp;quot;zafta&amp;quot;)
=============================================================
WARN: {date} {source} &amp;quot;404.html&amp;quot; is rendered empty
0 draft content
0 future content
0 expired content
0 pages created
0 non-page files copied
0 paginator pages created
0 tags created
0 categories created
in 4 ms
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Did you notice the output is different?
Two previous warning messages have disappeared, which contained the words
&amp;ldquo;Unable to locate layout&amp;rdquo; for your home page and the 404 page.
And, a new informational message tells us Hugo is accessing your theme&amp;rsquo;s tree
(&lt;code&gt;./themes/zafta/&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s check the &lt;code&gt;./public/&lt;/code&gt; directory to see what Hugo rendered:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ls -l public/
total 16
-rw-r--r--  1 {user} {group}    0 {date} 404.html
drwxr-xr-x  2 {user} {group}   68 {date} css
-rw-r--r--  1 {user} {group}    0 {date} index.html
-rw-r--r--  1 {user} {group}  511 {date} index.xml
drwxr-xr-x  2 {user} {group}   68 {date} js
-rw-r--r--  1 {user} {group}  210 {date} sitemap.xml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s similar to what we had before, without a theme.
We&amp;rsquo;d expect so, since all your theme&amp;rsquo;s templates are empty. But notice:
in &lt;code&gt;./public/&lt;/code&gt;, Hugo created the &lt;code&gt;css/&lt;/code&gt; and &lt;code&gt;js/&lt;/code&gt; directories.
That&amp;rsquo;s because Hugo found them in your theme&amp;rsquo;s &lt;code&gt;static/&lt;/code&gt; directory:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ls -l themes/zafta/static/
total 0
drwxr-xr-x  2 {user} {group}  68 {date} css
drwxr-xr-x  2 {user} {group}  68 {date} js
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;home-1&#34;&gt;Home&lt;/h4&gt;

&lt;p&gt;In a Hugo web site, each kind of page is informed (primarily) by just one
of the many different kinds of templates available;
yet the home page is special, because it gets its own kind of template,
and its own template file.&lt;/p&gt;

&lt;p&gt;Hugo uses template file &lt;code&gt;layouts/index.html&lt;/code&gt; to render the home page&amp;rsquo;s HTML.
Although Hugo&amp;rsquo;s documentation may state that this file is the home page&amp;rsquo;s
only required template, Hugo&amp;rsquo;s earlier warning message showed it actually
looks for two different templates:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;WARN: {date} {source} Unable to locate layout for homepage: [index.html _default/list.html]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;empty&#34;&gt;Empty&lt;/h4&gt;

&lt;p&gt;When Hugo generated your theme, it included an empty home page template.
Whenever Hugo renders your web site, it seeks that same template and uses it
to render the HTML for the home page. Currently, the template file is empty,
so the output HTML file is empty, too. Whenever we add rules to that template,
Hugo will use them in rendering the home page:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ find * -name index.html | xargs ls -l
-rw-r--r--  1 {user} {group}  0 {date} public/index.html
-rw-r--r--  1 {user} {group}  0 {date} themes/zafta/layouts/index.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As we&amp;rsquo;ll see later, Hugo follows this same pattern for all its templates.&lt;/p&gt;

&lt;h2 id=&#34;static-files&#34;&gt;Static Files&lt;/h2&gt;

&lt;p&gt;Hugo does two things when it renders your web site.
Besides using templates to transform your content into HTML,
it also incorporates your static files. Hugo&amp;rsquo;s rule is simple:
unlike with templates and content, static files aren&amp;rsquo;t transformed.
Hugo copies them over, exactly as they are.&lt;/p&gt;

&lt;p&gt;Hugo assumes that your web site will use both CSS and JavaScript,
so it generates some directories in your theme to hold them.
Remember opinions? Well, Hugo&amp;rsquo;s opinion is that you&amp;rsquo;ll store your CSS
in directory &lt;code&gt;static/css/&lt;/code&gt;, and your JavaScript in directory &lt;code&gt;static/js/&lt;/code&gt;.
If you don&amp;rsquo;t like that, you can relocate these directories
or change their names (as long as they remain in your theme&amp;rsquo;s &lt;code&gt;static/&lt;/code&gt; tree),
or delete them completely.
Hugo is nice enough to offer its opinion; yet it still behaves nicely,
if you disagree:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ find themes/zafta/* -type d | xargs ls -dl
drwxr-xr-x  3 {user} {group}  102 {date} themes/zafta/archetypes
drwxr-xr-x  6 {user} {group}  204 {date} themes/zafta/layouts
drwxr-xr-x  4 {user} {group}  136 {date} themes/zafta/layouts/_default
drwxr-xr-x  4 {user} {group}  136 {date} themes/zafta/layouts/partials
drwxr-xr-x  4 {user} {group}  136 {date} themes/zafta/static
drwxr-xr-x  2 {user} {group}   68 {date} themes/zafta/static/css
drwxr-xr-x  2 {user} {group}   68 {date} themes/zafta/static/js
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;theme-development&#34;&gt;Theme Development&lt;/h2&gt;

&lt;p&gt;Generally (using any kind of software), working on a theme means
changing your files, serving your web site again, and then verifying
the resulting improvements in your browser.
With Hugo, this way of working is quite easy:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First purge the &lt;code&gt;./public/&lt;/code&gt; tree. (This is optional but useful,
if you want to start with a clean slate.)&lt;/li&gt;
&lt;li&gt;Run the built-in Hugo web server.&lt;/li&gt;
&lt;li&gt;Open your web site in a browser &amp;mdash; and then:&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;Edit your theme;&lt;/li&gt;
&lt;li&gt;Glance at your browser window to see your changes; and&lt;/li&gt;
&lt;li&gt;Repeat.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I&amp;rsquo;ll throw in one more opinion: &lt;strong&gt;&lt;em&gt;never&lt;/em&gt;&lt;/strong&gt; directly edit a theme on a live
web site. Instead, always develop &lt;strong&gt;&lt;em&gt;using a copy&lt;/em&gt;&lt;/strong&gt;. First, make some changes
to your theme and test them. Afterwards, &lt;strong&gt;when you&amp;rsquo;ve got them working,&lt;/strong&gt;
copy them to your web site. For added safety, use a tool like Git to keep
some revision history of your content, and of your theme. Believe me:
it&amp;rsquo;s too easy to lose your changes, and your mind!&lt;/p&gt;

&lt;p&gt;Check out the main Hugo web site for information about using Git with Hugo.&lt;/p&gt;

&lt;h3 id=&#34;purge&#34;&gt;Purge&lt;/h3&gt;

&lt;p&gt;When rendering your web site, Hugo will create new files in the &lt;code&gt;./public/&lt;/code&gt;
tree and update existing ones. But it won&amp;rsquo;t delete files that are
no longer used. For example, files previously rendered with
(what is now) the wrong basename, or in the wrong directory, will remain.
Later, if you leave them, they&amp;rsquo;ll likely confuse you.
Cleaning out your &lt;code&gt;./public/&lt;/code&gt; files prior to rendering can help.&lt;/p&gt;

&lt;p&gt;When Hugo is running in web server mode (as of version 0.15),
it doesn&amp;rsquo;t actually write the files. Instead,
it keeps all the rendered files in memory. So, you can &amp;ldquo;clean&amp;rdquo; up
your files simply by stopping and restarting the web server.&lt;/p&gt;

&lt;h3 id=&#34;serve-1&#34;&gt;Serve&lt;/h3&gt;

&lt;h4 id=&#34;watch&#34;&gt;Watch&lt;/h4&gt;

&lt;p&gt;Hugo&amp;rsquo;s watch functionality monitors the relevant content, theme and
(overriding) site trees for filesystem changes,
and renders your web site again automatically, when changes are detected.&lt;/p&gt;

&lt;p&gt;By default, watch is
enabled when in web server mode (&lt;code&gt;hugo server&lt;/code&gt;),
but disabled for the web site renderer (&lt;code&gt;hugo&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;In some use cases,
Hugo&amp;rsquo;s web site renderer should continue running and watch &amp;mdash; simply
type &lt;code&gt;hugo --watch&lt;/code&gt; on the command line.&lt;/p&gt;

&lt;p&gt;Sometimes with Docker containers (and Heroku slugs),
the site sources may live on a read-only filesystem.
In that scenario, it makes no sense
for Hugo&amp;rsquo;s web server to watch for file changes &amp;mdash; so
use &lt;code&gt;hugo server --watch=false&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;reload&#34;&gt;Reload&lt;/h4&gt;

&lt;p&gt;Hugo&amp;rsquo;s built in web server includes
&lt;a href=&#34;http://gohugo.io/extras/livereload/&#34;&gt;LiveReload&lt;/a&gt; functionality. When any page is updated
in the filesystem, the web browser is told to refresh its currently-open tabs
from your web site. Usually, this happens faster than you can say,
&amp;ldquo;Wow, that&amp;rsquo;s totally amazing!&amp;rdquo;&lt;/p&gt;

&lt;h3 id=&#34;workflow&#34;&gt;Workflow&lt;/h3&gt;

&lt;p&gt;Again,
I recommend you use the following commands as the basis for your workflow:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# purge old files. Hugo will recreate the public directory
$ rm -rf public/

# run Hugo in watch mode with LiveReload;
# when you&#39;re done, stop the web server
$ hugo server --verbose
Press Ctrl+C to stop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Below is some sample output showing Hugo detecting a change in the home page
template. (Actually, the change is the edit we&amp;rsquo;re about to do.) Once it&amp;rsquo;s
rendered again, the web browser automatically reloads the page.&lt;/p&gt;

&lt;p&gt;(As I said above &amp;mdash; it&amp;rsquo;s amazing:)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rm -rf public/

$ hugo server --verbose
INFO: {date} {source} Using config file: /tmp/mySite/config.toml
INFO: {date} {source} using a UnionFS for static directory comprised of:
INFO: {date} {source} Base: /tmp/mySite/themes/zafta/static
INFO: {date} {source} Overlay: /tmp/mySite/static/
INFO: {date} {source} syncing static files to /
Started building site
WARN: {date} {source} &amp;quot;/&amp;quot; is rendered empty
=============================================================
Your rendered home page is blank: /index.html is zero-length
 * Did you specify a theme on the command-line or in your
   &amp;quot;config.toml&amp;quot; file?  (Current theme: &amp;quot;&amp;quot;)
=============================================================
WARN: {date} {source} &amp;quot;404.html&amp;quot; is rendered empty
0 draft content
0 future content
0 expired content
0 pages created
0 non-page files copied
0 paginator pages created
0 tags created
0 categories created
in 4 ms
Watching for changes in /tmp/mySite/{data,content,layouts,static,themes}
Serving pages from memory
Web Server is available at http://localhost:1313/ (bind address 127.0.0.1)
Press Ctrl+C to stop
INFO: {date} {source} Received System Events: [&amp;quot;/tmp/mySite/themes/zafta/layouts/index.html&amp;quot;: WRITE]

Change detected, rebuilding site
{date}
Template changed /tmp/mySite/themes/zafta/layouts/index.html
WARN: {date} {source} &amp;quot;404.html&amp;quot; is rendered empty
0 draft content
0 future content
0 expired content
0 pages created
0 non-page files copied
0 paginator pages created
0 tags created
0 categories created
in 3 ms
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;home-template&#34;&gt;Home Template&lt;/h2&gt;

&lt;p&gt;The home page is one of the few special pages Hugo renders automatically.
As mentioned earlier, it looks in your theme&amp;rsquo;s &lt;code&gt;layouts/&lt;/code&gt; tree for one
of two files:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;index.html&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_default/list.html&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We could edit the default template, but a good design principle is to edit
the most specific template available. That&amp;rsquo;s not a hard-and-fast rule
(in fact, in this tutorial, we&amp;rsquo;ll break it a few times),
but it&amp;rsquo;s a good generalization.&lt;/p&gt;

&lt;h3 id=&#34;static&#34;&gt;Static&lt;/h3&gt;

&lt;p&gt;Right now, your home page is empty because you&amp;rsquo;ve added no content,
and because its template includes no logic. Let&amp;rsquo;s change that by adding
some text to your home page template (&lt;code&gt;layouts/index.html&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;$ vi themes/zafta/layouts/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;p&amp;gt;Hugo says hello!&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
:wq
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s press Ctrl+C and render the web site, and then verify the results:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;$ rm -rf public/

$ hugo --verbose
INFO: {date} {source} Using config file: /tmp/mySite/config.toml
INFO: {date} {source} using a UnionFS for static directory comprised of:
INFO: {date} {source} Base: /tmp/mySite/themes/zafta/static
INFO: {date} {source} Overlay: /tmp/mySite/static/
INFO: {date} {source} syncing static files to /tmp/mySite/public/
Started building site
WARN: {date} {source} &amp;quot;404.html&amp;quot; is rendered empty
0 draft content
0 future content
0 expired content
0 pages created
0 non-page files copied
0 paginator pages created
0 tags created
0 categories created
in 4 ms

$ ls -l public/index.html
-rw-r--r--  1 {user} {group}  72 {date} public/index.html

$ cat public/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;p&amp;gt;Hugo says hello!&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;dynamic&#34;&gt;Dynamic&lt;/h3&gt;

&lt;p&gt;A &lt;strong&gt;&lt;em&gt;dynamic&lt;/em&gt;&lt;/strong&gt; home page? Because Hugo is a &lt;em&gt;static web site&lt;/em&gt; generator,
the word &lt;em&gt;dynamic&lt;/em&gt; seems odd, doesn&amp;rsquo;t it? But this means arranging for your
home page to reflect the content in your web site automatically,
each time Hugo renders it.&lt;/p&gt;

&lt;p&gt;To accomplish that, later we&amp;rsquo;ll add an iterator to your home page template.&lt;/p&gt;

&lt;h2 id=&#34;article&#34;&gt;Article&lt;/h2&gt;

&lt;p&gt;Now that Hugo is successfully rendering your home page with static content,
let&amp;rsquo;s add more pages to your web site. We&amp;rsquo;ll display some new articles
as a list on your home page; and we&amp;rsquo;ll display each article
on its own page, too.&lt;/p&gt;

&lt;p&gt;Hugo has a command to generate an entry skeleton for new content,
just as it does for web sites and themes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ hugo --verbose new article/First.md
INFO: {date} {source} Using config file: /tmp/mySite/config.toml
INFO: {date} {source} attempting to create  article/First.md of article
INFO: {date} {source} curpath: /tmp/mySite/themes/zafta/archetypes/default.md
INFO: {date} {source} creating /tmp/mySite/content/article/First.md
/tmp/mySite/content/article/First.md created

$ ls -l content/article/
total 8
-rw-r--r--  1 {user} {group}  61 {date} First.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s generate a second article, while we&amp;rsquo;re here:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ hugo --verbose new article/Second.md
INFO: {date} {source} Using config file: /tmp/mySite/config.toml
INFO: {date} {source} attempting to create  article/Second.md of article
INFO: {date} {source} curpath: /tmp/mySite/themes/zafta/archetypes/default.md
INFO: {date} {source} creating /tmp/mySite/content/article/Second.md
/tmp/mySite/content/article/Second.md created

$ ls -l content/article/
total 16
-rw-r--r--  1 {user} {group}  61 {date} First.md
-rw-r--r--  1 {user} {group}  62 {date} Second.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s edit both those articles. Be careful to preserve their front-matter,
but append some text to their bodies, as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ vi content/article/First.md
In vel ligula tortor. Aliquam erat volutpat.
Pellentesque at felis eu quam tincidunt dignissim.
Nulla facilisi.

Pellentesque tempus nisi et interdum convallis.
In quam ante, vulputate at massa et, rutrum
gravida dui. Phasellus tristique libero at ex.
:wq

$ vi content/article/Second.md
Fusce lacus magna, maximus nec sapien eu,
porta efficitur neque. Aliquam erat volutpat.
Vestibulum enim nibh, posuere eu diam nec,
varius sagittis turpis.

Praesent quis sapien egestas mauris accumsan
pulvinar. Ut mattis gravida venenatis. Vivamus
lobortis risus id nisi rutrum, at iaculis.
:wq
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, for example, &lt;code&gt;./content/article/Second.md&lt;/code&gt; becomes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;$ cat content/article/Second.md
+++
date = &amp;quot;2040-01-18T21:08:08-06:00&amp;quot;
title = &amp;quot;Second&amp;quot;

+++
Fusce lacus magna, maximus nec sapien eu,
porta efficitur neque. Aliquam erat volutpat.
Vestibulum enim nibh, posuere eu diam nec,
varius sagittis turpis.

Praesent quis sapien egestas mauris accumsan
pulvinar. Ut mattis gravida venenatis. Vivamus
lobortis risus id nisi rutrum, at iaculis.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s render the web site, and then verify the results:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rm -rf public/

$ hugo --verbose
INFO: {date} {source} Using config file: /tmp/mySite/config.toml
INFO: {date} {source} using a UnionFS for static directory comprised of:
INFO: {date} {source} Base: /tmp/mySite/themes/zafta/static
INFO: {date} {source} Overlay: /tmp/mySite/static/
INFO: {date} {source} syncing static files to /tmp/mySite/public/
Started building site
INFO: {date} {source} found taxonomies: map[string]string{&amp;quot;tag&amp;quot;:&amp;quot;tags&amp;quot;, &amp;quot;category&amp;quot;:&amp;quot;categories&amp;quot;}
WARN: {date} {source} &amp;quot;article&amp;quot; is rendered empty
WARN: {date} {source} &amp;quot;article/Second.html&amp;quot; is rendered empty
WARN: {date} {source} &amp;quot;article/First.html&amp;quot; is rendered empty
WARN: {date} {source} &amp;quot;404.html&amp;quot; is rendered empty
0 draft content
0 future content
0 expired content
2 pages created
0 non-page files copied
0 paginator pages created
0 tags created
0 categories created
in 7 ms
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output says Hugo rendered (&amp;ldquo;created&amp;rdquo;) two pages.
Those pages are your new articles:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ find public -type f -name &#39;*.html&#39; | xargs ls -l
-rw-r--r--  1 {user} {group}   0 {date} public/404.html
-rw-r--r--  1 {user} {group}   0 {date} public/article/First/index.html
-rw-r--r--  1 {user} {group}   0 {date} public/article/index.html
-rw-r--r--  1 {user} {group}   0 {date} public/article/Second/index.html
-rw-r--r--  1 {user} {group}  72 {date} public/index.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The new pages are empty, because Hugo rendered their HTML from empty
template files. The home page doesn&amp;rsquo;t show us the new content, either:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;$ cat public/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;p&amp;gt;Hugo says hello!&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, we have to edit the templates, in order to pick up the articles.&lt;/p&gt;

&lt;h3 id=&#34;single-list&#34;&gt;Single &amp;amp; List&lt;/h3&gt;

&lt;p&gt;Here again I&amp;rsquo;ll discuss three kinds of Hugo templates. One kind is
the home page template we edited previously; it&amp;rsquo;s applicable only to
the home page. Another kind is Single templates, which render output for
just one content file. The third kind are List templates, which group
multiple pieces of content before rendering output.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s important to note that, generally, List templates
(except the home page template) are named &lt;code&gt;list.html&lt;/code&gt;;
and Single templates are named &lt;code&gt;single.html&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Hugo also has three other kinds of templates:
Partials, &lt;em&gt;Content Views&lt;/em&gt;, and &lt;em&gt;Terms&lt;/em&gt;.
We&amp;rsquo;ll give examples of some Partial templates; but otherwise,
we won&amp;rsquo;t go into much detail about these.&lt;/p&gt;

&lt;h3 id=&#34;home-2&#34;&gt;Home&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;ll want your home page to list the articles you just created.
So, let&amp;rsquo;s alter its template file (&lt;code&gt;layouts/index.html&lt;/code&gt;) to show them.
Hugo runs each template&amp;rsquo;s logic whenever it renders that template&amp;rsquo;s web page
(of course):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;$ vi themes/zafta/layouts/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
  {{- range first 10 .Data.Pages }}
    &amp;lt;h4&amp;gt;&amp;lt;a href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;&amp;lt;/h4&amp;gt;
  {{- end }}
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
:wq
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;engine&#34;&gt;Engine&lt;/h4&gt;

&lt;p&gt;Hugo uses the &lt;a href=&#34;https://gohugo.io/templates/go-templates/&#34;&gt;Go language&amp;rsquo;s template
engine&lt;/a&gt;.
That engine scans your template files for commands enclosed between
&amp;ldquo;{{&amp;rdquo; and &amp;ldquo;}}&amp;rdquo; (these are doubled, curly braces &amp;mdash; affectionately
known as &amp;ldquo;mustaches&amp;rdquo;).&lt;/p&gt;

&lt;p&gt;BTW, a hyphen, if placed immediately after an opening mustache, or
immediately before a closing one, will prevent extraneous newlines.
(This can make Hugo&amp;rsquo;s output look better, when viewed as text.)&lt;/p&gt;

&lt;p&gt;So, the mustache commands in your newly-altered template are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&amp;nbsp;&lt;code&gt;range ...&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&amp;nbsp;&lt;code&gt;.Permalink&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&amp;nbsp;&lt;code&gt;.Title&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&amp;nbsp;&lt;code&gt;end&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The &lt;code&gt;range&lt;/code&gt; command is an iterator. We&amp;rsquo;re using it to go through the latest
ten pages. (Hugo characterizes some of its HTML output files as &amp;ldquo;pages,&amp;rdquo;
but not all &amp;mdash; see above.)&lt;/p&gt;

&lt;p&gt;Looping through the list of data pages will consider each such HTML file
that Hugo renders (or rather &amp;mdash; to speak more precisely &amp;mdash; each
such HTML file that Hugo currently calculates it &lt;em&gt;will&lt;/em&gt; render).&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s helpful to remember that Hugo sets some variables, such as &lt;code&gt;.Data&lt;/code&gt;, quite
early in its overall processing. Hugo loads information from every content
file into that variable, and gives all the templates a chance to process that
variable&amp;rsquo;s contents, before actually rendering any HTML output files.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.Permalink&lt;/code&gt; supplies the URL which links to that article&amp;rsquo;s page, and
&lt;code&gt;.Title&lt;/code&gt; supplies the value of its &amp;ldquo;title&amp;rdquo; variable. Hugo obtains this
from the front-matter in the article&amp;rsquo;s Markdown file.&lt;/p&gt;

&lt;p&gt;Automatically, the pages are considered in descending order of the generation
times of their Markdown files (actually, based on the value of the &amp;ldquo;date&amp;rdquo;
variable in their front-matter) so that the latest is first (naturally).&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;end&lt;/code&gt; command signals the end of the range iterator. The engine
loops back to the top of the iterator, whenever it finds &lt;code&gt;end.&lt;/code&gt;
Everything between &lt;code&gt;range&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; is reevaluated,
each time the engine goes through the iterator.&lt;/p&gt;

&lt;p&gt;For the present template, this means that the titles of your latest
ten pages (or however many exist, if that&amp;rsquo;s less) become the
&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent&#34;&gt;textContent&lt;/a&gt;
of an equivalent number of copies Hugo makes, of your level-four
subheading tags (and anchor tags). &lt;code&gt;.Permalink&lt;/code&gt; enables these to link
to the actual articles.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s render your web site, and then verify the results:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;$ rm -rf public/

$ hugo --verbose
INFO: {date} {source} Using config file: /tmp/mySite/config.toml
INFO: {date} {source} using a UnionFS for static directory comprised of:
INFO: {date} {source} Base: /tmp/mySite/themes/zafta/static
INFO: {date} {source} Overlay: /tmp/mySite/static/
INFO: {date} {source} syncing static files to /tmp/mySite/public/
Started building site
INFO: {date} {source} found taxonomies: map[string]string{&amp;quot;tag&amp;quot;:&amp;quot;tags&amp;quot;, &amp;quot;category&amp;quot;:&amp;quot;categories&amp;quot;}
WARN: {date} {source} &amp;quot;article&amp;quot; is rendered empty
WARN: {date} {source} &amp;quot;article/Second.html&amp;quot; is rendered empty
WARN: {date} {source} &amp;quot;article/First.html&amp;quot; is rendered empty
WARN: {date} {source} &amp;quot;404.html&amp;quot; is rendered empty
0 draft content
0 future content
0 expired content
2 pages created
0 non-page files copied
0 paginator pages created
0 tags created
0 categories created
in 7 ms

$ find public -type f -name &#39;*.html&#39; | xargs ls -l
-rw-r--r--  1 {user} {group}   0 {date} public/404.html
-rw-r--r--  1 {user} {group}   0 {date} public/article/First/index.html
-rw-r--r--  1 {user} {group}   0 {date} public/article/index.html
-rw-r--r--  1 {user} {group}   0 {date} public/article/Second/index.html
-rw-r--r--  1 {user} {group} 232 {date} public/index.html

$ cat public/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;h4&amp;gt;&amp;lt;a href=&amp;quot;http://example.org/article/Second/&amp;quot;&amp;gt;Second&amp;lt;/a&amp;gt;&amp;lt;/h4&amp;gt;
    &amp;lt;h4&amp;gt;&amp;lt;a href=&amp;quot;http://example.org/article/First/&amp;quot;&amp;gt;First&amp;lt;/a&amp;gt;&amp;lt;/h4&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;all-done&#34;&gt;All Done&lt;/h3&gt;

&lt;p&gt;Congratulations! Your home page shows the titles of your two articles, along
with the links to them. The articles themselves are still empty. But,
let&amp;rsquo;s take a moment to appreciate what we&amp;rsquo;ve done, so far!&lt;/p&gt;

&lt;p&gt;Your home page template (&lt;code&gt;layouts/index.html&lt;/code&gt;) now renders output dynamically.
Believe it or not, by inserting the range command inside those doubled
curly braces, you&amp;rsquo;ve learned everything you need to know &amp;mdash;
essentially &amp;mdash; about developing a theme.&lt;/p&gt;

&lt;p&gt;All that&amp;rsquo;s left is understanding which of your templates renders each content
file, and becoming more familiar with the commands for the template engine.&lt;/p&gt;

&lt;h2 id=&#34;more&#34;&gt;More&lt;/h2&gt;

&lt;p&gt;Well &amp;mdash; if things were so simple, this tutorial would be much shorter!&lt;/p&gt;

&lt;p&gt;Some things are still useful to learn, because they&amp;rsquo;ll make creating new
templates &lt;em&gt;much&lt;/em&gt; easier &amp;mdash; so, I&amp;rsquo;ll cover them, now.&lt;/p&gt;

&lt;h3 id=&#34;base-url&#34;&gt;Base URL&lt;/h3&gt;

&lt;p&gt;While developing and testing your theme, did you notice that the links in the
rendered &lt;code&gt;./public/index.html&lt;/code&gt; file use the full &amp;ldquo;baseURL&amp;rdquo; from your
&lt;code&gt;./config.toml&lt;/code&gt; file? That&amp;rsquo;s because those files are intended to be deployed
to your web server.&lt;/p&gt;

&lt;p&gt;Whenever you test your theme, you start Hugo in web server mode
(with &lt;code&gt;hugo server&lt;/code&gt;) and connect to it with your web browser.
That command is smart enough to replace the &amp;ldquo;baseURL&amp;rdquo; with
&lt;code&gt;http://localhost:1313&lt;/code&gt; on the fly, so that the links automatically
work for you.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s another reason why we recommend testing with the built-in web server.&lt;/p&gt;

&lt;h3 id=&#34;content-1&#34;&gt;Content&lt;/h3&gt;

&lt;p&gt;The articles you&amp;rsquo;ve been working with are in your &lt;code&gt;./content/article/&lt;/code&gt;
directory. That means their &lt;em&gt;Section&lt;/em&gt; (as far as templates are concerned)
is &amp;ldquo;article&amp;rdquo;. Unless we do something unusual in their front-matter, their
&lt;em&gt;Type&lt;/em&gt; is also &amp;ldquo;article&amp;rdquo;.&lt;/p&gt;

&lt;h4 id=&#34;search&#34;&gt;Search&lt;/h4&gt;

&lt;p&gt;Hugo uses the Section and Type to find a template file for every piece of
content it renders. Hugo first will seek a template file in subdirectories of
&lt;code&gt;layouts/&lt;/code&gt; that match its Section or Type name (i.e., in &lt;code&gt;layouts/SECTION/&lt;/code&gt;
or &lt;code&gt;layouts/TYPE/&lt;/code&gt;). If it can&amp;rsquo;t find a file there, then it will look in the
&lt;code&gt;layouts/_default/&lt;/code&gt; directory. Other documentation covers some twists about
categories and tags, but we won&amp;rsquo;t use those in this tutorial. Therefore,
we can assume that Hugo will try first &lt;code&gt;layouts/article/single.html&lt;/code&gt;, then
&lt;code&gt;layouts/_default/single.html&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now that we know the search rule, let&amp;rsquo;s see what&amp;rsquo;s available:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ find themes/zafta -name single.html | xargs ls -l
-rw-r--r--  1 {user} {group}  0 {date} themes/zafta/layouts/_default/single.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you look back at the articles Hugo has rendered, you can see that
they were empty. Now we can see that this is because Hugo sought
&lt;code&gt;layouts/article/single.html&lt;/code&gt; but couldn&amp;rsquo;t find it, and template
&lt;code&gt;layouts/_default/single.html&lt;/code&gt; was empty. Therefore, the rendered article
file was empty, too.&lt;/p&gt;

&lt;p&gt;So, we could either create a new template, &lt;code&gt;layouts/article/single.html&lt;/code&gt;,
or edit the default one.&lt;/p&gt;

&lt;h4 id=&#34;default-single&#34;&gt;Default Single&lt;/h4&gt;

&lt;p&gt;Since we know of no other content Types, let&amp;rsquo;s start by editing the default
template file, &lt;code&gt;layouts/_default/single.html&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As we mentioned earlier, you always should edit (or create) the most
specific template first, in order to avoid accidentally changing how other
content is displayed. However, we&amp;rsquo;re breaking that rule intentionally,
just so we can explore how the default is used.&lt;/p&gt;

&lt;p&gt;Remember, any content &amp;mdash; for which we don&amp;rsquo;t create a specific template
&amp;mdash; will end up using this default template. That can be good or bad.
Bad, because I know we&amp;rsquo;ll be adding different Types of content, and we&amp;rsquo;ll
eventually undo some of the changes we&amp;rsquo;ve made. Good, because then we&amp;rsquo;ll be
able to see some results immediately. It&amp;rsquo;s also good to create the default
template first, because with it, we can start to develop the basic layout
for the web site.&lt;/p&gt;

&lt;p&gt;As we add more content Types, we&amp;rsquo;ll refactor this file and move its logic
around. Hugo makes this fairly painless, so we&amp;rsquo;ll accept the cost and proceed.&lt;/p&gt;

&lt;p&gt;Please see Hugo&amp;rsquo;s documentation on template rendering, for all the details on
determining which template to use. And, as the documentation mentions, if
your web site is a single-page application (SPA), you can delete all the
other templates and work with just the default Single one. By itself,
that fact provides a refreshing amount of joy.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s edit the default template file (&lt;code&gt;layouts/_default/single.html&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;$ vi themes/zafta/layouts/_default/single.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;title&amp;gt;{{ .Title }}&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;h1&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
  &amp;lt;h6&amp;gt;{{ .Date.Format &amp;quot;Mon, Jan 2, 2006&amp;quot; }}&amp;lt;/h6&amp;gt;
  {{ .Content }}
  &amp;lt;h4&amp;gt;&amp;lt;a href=&amp;quot;{{ .Site.BaseURL }}&amp;quot;&amp;gt;Home&amp;lt;/a&amp;gt;&amp;lt;/h4&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
:wq
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;verify&#34;&gt;Verify&lt;/h4&gt;

&lt;p&gt;Let&amp;rsquo;s render the web site, and verify the results:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rm -rf public/

$ hugo --verbose
INFO: {date} {source} Using config file: /tmp/mySite/config.toml
INFO: {date} {source} using a UnionFS for static directory comprised of:
INFO: {date} {source} Base: /tmp/mySite/themes/zafta/static
INFO: {date} {source} Overlay: /tmp/mySite/static/
INFO: {date} {source} syncing static files to /tmp/mySite/public/
Started building site
INFO: {date} {source} found taxonomies: map[string]string{&amp;quot;tag&amp;quot;:&amp;quot;tags&amp;quot;, &amp;quot;category&amp;quot;:&amp;quot;categories&amp;quot;}
WARN: {date} {source} &amp;quot;article&amp;quot; is rendered empty
WARN: {date} {source} &amp;quot;404.html&amp;quot; is rendered empty
0 draft content
0 future content
0 expired content
2 pages created
0 non-page files copied
0 paginator pages created
0 tags created
0 categories created
in 7 ms

$ find public -type f -name &#39;*.html&#39; | xargs ls -l
-rw-r--r--  1 {user} {group}    0 {date} public/404.html
-rw-r--r--  1 {user} {group}  473 {date} public/article/First/index.html
-rw-r--r--  1 {user} {group}    0 {date} public/article/index.html
-rw-r--r--  1 {user} {group}  514 {date} public/article/Second/index.html
-rw-r--r--  1 {user} {group}  232 {date} public/index.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that although Hugo rendered a file, to list your articles:
&lt;code&gt;./public/article/index.html&lt;/code&gt;, the file is empty, because we don&amp;rsquo;t have
a template for it. (However: see next.) The other HTML files contain your
content, as we can see below:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;$ cat public/article/First/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;title&amp;gt;First&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;h1&amp;gt;First&amp;lt;/h1&amp;gt;
  &amp;lt;h6&amp;gt;Wed, Jan 18, 2040&amp;lt;/h6&amp;gt;
  &amp;lt;p&amp;gt;In vel ligula tortor. Aliquam erat volutpat.
Pellentesque at felis eu quam tincidunt dignissim.
Nulla facilisi.&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;Pellentesque tempus nisi et interdum convallis.
In quam ante, vulputate at massa et, rutrum
gravida dui. Phasellus tristique libero at ex.&amp;lt;/p&amp;gt;

  &amp;lt;h4&amp;gt;&amp;lt;a href=&amp;quot;http://example.org/&amp;quot;&amp;gt;Home&amp;lt;/a&amp;gt;&amp;lt;/h4&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

$ cat public/article/Second/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;title&amp;gt;Second&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;h1&amp;gt;Second&amp;lt;/h1&amp;gt;
  &amp;lt;h6&amp;gt;Wed, Jan 18, 2040&amp;lt;/h6&amp;gt;
  &amp;lt;p&amp;gt;Fusce lacus magna, maximus nec sapien eu,
porta efficitur neque. Aliquam erat volutpat.
Vestibulum enim nibh, posuere eu diam nec,
varius sagittis turpis.&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;Praesent quis sapien egestas mauris accumsan
pulvinar. Ut mattis gravida venenatis. Vivamus
lobortis risus id nisi rutrum, at iaculis.&amp;lt;/p&amp;gt;

  &amp;lt;h4&amp;gt;&amp;lt;a href=&amp;quot;http://example.org/&amp;quot;&amp;gt;Home&amp;lt;/a&amp;gt;&amp;lt;/h4&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Again, notice that your rendered article files have content.
You can run &lt;code&gt;hugo server&lt;/code&gt; and use your browser to confirm this.
You should see your home page, and it should contain the titles of both
articles. Each title should be a link to its respective article.&lt;/p&gt;

&lt;p&gt;Each article should be displayed fully on its own page. And at the bottom of
each article, you should see a link which takes you back to your home page.&lt;/p&gt;

&lt;h3 id=&#34;article-list&#34;&gt;Article List&lt;/h3&gt;

&lt;p&gt;Your home page still lists your most recent articles. However &amp;mdash;
remember, from above, that I mentioned an empty file,
&lt;code&gt;./public/article/index.html&lt;/code&gt;?
Let&amp;rsquo;s make that show a list of &lt;strong&gt;&lt;em&gt;all&lt;/em&gt;&lt;/strong&gt; of your articles
(not just the latest ten).&lt;/p&gt;

&lt;p&gt;We need to decide which template to edit. Key to this, is that
individual pages always come from Single templates. On the other hand,
only List templates are capable of rendering pages which display collections
(or lists) of other pages.&lt;/p&gt;

&lt;p&gt;Because the new page will show a listing, we should select a List template.
Let&amp;rsquo;s take a quick look to see which List templates are available already:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ find themes/zafta -name list.html | xargs ls -l
-rw-r--r--  1 {user} {group}  0 {date} themes/zafta/layouts/_default/list.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, just as before with the single articles, so again now with the list of
articles, we must decide: whether to edit &lt;code&gt;layouts/_default/list.html&lt;/code&gt;,
or to create &lt;code&gt;layouts/article/list.html&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;default-list&#34;&gt;Default List&lt;/h4&gt;

&lt;p&gt;We still don&amp;rsquo;t have multiple content Types &amp;mdash; so, remaining consistent,
let&amp;rsquo;s edit the default List template:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;$ vi themes/zafta/layouts/_default/list.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;h1&amp;gt;Articles&amp;lt;/h1&amp;gt;
  {{- range first 10 .Data.Pages }}
    &amp;lt;h4&amp;gt;&amp;lt;a href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;&amp;lt;/h4&amp;gt;
  {{- end }}
  &amp;lt;h4&amp;gt;&amp;lt;a href=&amp;quot;{{ .Site.BaseURL }}&amp;quot;&amp;gt;Home&amp;lt;/a&amp;gt;&amp;lt;/h4&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
:wq
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s render everything again:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rm -rf public/

$ hugo --verbose
INFO: {date} {source} Using config file: /tmp/mySite/config.toml
INFO: {date} {source} using a UnionFS for static directory comprised of:
INFO: {date} {source} Base: /tmp/mySite/themes/zafta/static
INFO: {date} {source} Overlay: /tmp/mySite/static/
INFO: {date} {source} syncing static files to /tmp/mySite/public/
Started building site
INFO: {date} {source} found taxonomies: map[string]string{&amp;quot;tag&amp;quot;:&amp;quot;tags&amp;quot;, &amp;quot;category&amp;quot;:&amp;quot;categories&amp;quot;}
WARN: {date} {source} &amp;quot;404.html&amp;quot; is rendered empty
0 draft content
0 future content
0 expired content
2 pages created
0 non-page files copied
0 paginator pages created
0 categories created
0 tags created
in 7 ms

$ find public -type f -name &#39;*.html&#39; | xargs ls -l
-rw-r--r--  1 {user} {group}    0 {date} public/404.html
-rw-r--r--  1 {user} {group}  473 {date} public/article/First/index.html
-rw-r--r--  1 {user} {group}  327 {date} public/article/index.html
-rw-r--r--  1 {user} {group}  514 {date} public/article/Second/index.html
-rw-r--r--  1 {user} {group}  232 {date} public/index.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now (as you can see), we have a list of articles. To confirm it,
type &lt;code&gt;hugo server&lt;/code&gt;; then, in your browser, navigate to &lt;code&gt;/article/&lt;/code&gt;.
(Later, we&amp;rsquo;ll link to it.)&lt;/p&gt;

&lt;h2 id=&#34;about&#34;&gt;About&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s add an About page, and try to display it at the top level
(as opposed to the next level down, where we placed your articles).&lt;/p&gt;

&lt;h3 id=&#34;guide&#34;&gt;Guide&lt;/h3&gt;

&lt;p&gt;Hugo&amp;rsquo;s default goal is to let the directory structure of the &lt;code&gt;./content/&lt;/code&gt;
tree guide the location of the HTML it renders to the &lt;code&gt;./public/&lt;/code&gt; tree.
Let&amp;rsquo;s check this, by generating an About page at the content&amp;rsquo;s top level:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;$ hugo new About.md
/tmp/mySite/content/About.md created

$ ls -l content/
total 8
-rw-r--r--   1 {user} {group}   61 {date} About.md
drwxr-xr-x   4 {user} {group}  136 {date} article

$ vi content/About.md
+++
date = &amp;quot;2040-01-18T22:01:00-06:00&amp;quot;
title = &amp;quot;About&amp;quot;

+++
Neque porro quisquam est qui dolorem
ipsum quia dolor sit amet consectetur
adipisci velit.
:wq
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;check&#34;&gt;Check&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s render your web site, and check the results:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;$ rm -rf public/

$ hugo --verbose
INFO: {date} {source} Using config file: /tmp/mySite/config.toml
INFO: {date} {source} using a UnionFS for static directory comprised of:
INFO: {date} {source} Base: /tmp/mySite/themes/zafta/static
INFO: {date} {source} Overlay: /tmp/mySite/static/
INFO: {date} {source} syncing static files to /tmp/mySite/public/
Started building site
INFO: {date} {source} found taxonomies: map[string]string{&amp;quot;tag&amp;quot;:&amp;quot;tags&amp;quot;, &amp;quot;category&amp;quot;:&amp;quot;categories&amp;quot;}
WARN: {date} {source} &amp;quot;404.html&amp;quot; is rendered empty
0 draft content
0 future content
0 expired content
3 pages created
0 non-page files copied
0 paginator pages created
0 tags created
0 categories created
in 9 ms

$ ls -l public/
total 24
-rw-r--r--  1 {user} {group}     0 {date} 404.html
drwxr-xr-x  3 {user} {group}   102 {date} About
drwxr-xr-x  6 {user} {group}   204 {date} article
drwxr-xr-x  2 {user} {group}    68 {date} css
-rw-r--r--  1 {user} {group}   316 {date} index.html
-rw-r--r--  1 {user} {group}  2221 {date} index.xml
drwxr-xr-x  2 {user} {group}    68 {date} js
-rw-r--r--  1 {user} {group}   681 {date} sitemap.xml

$ ls -l public/About/
total 8
-rw-r--r--  1 {user} {group}  305 {date} index.html

$ cat public/About/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;title&amp;gt;About&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;h1&amp;gt;About&amp;lt;/h1&amp;gt;
  &amp;lt;h6&amp;gt;Wed, Jan 18, 2040&amp;lt;/h6&amp;gt;
  &amp;lt;p&amp;gt;Neque porro quisquam est qui dolorem
ipsum quia dolor sit amet consectetur
adipisci velit.&amp;lt;/p&amp;gt;

  &amp;lt;h4&amp;gt;&amp;lt;a href=&amp;quot;http://example.org/&amp;quot;&amp;gt;Home&amp;lt;/a&amp;gt;&amp;lt;/h4&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Oh, well. &amp;mdash; Did you notice that your page wasn&amp;rsquo;t rendered at the
top level? It was rendered to a subdirectory named &lt;code&gt;./public/About/&lt;/code&gt;.
That name came from the basename of your Markdown file &lt;code&gt;./content/About.md&lt;/code&gt;.
Interesting &amp;mdash; but, we&amp;rsquo;ll let that go, for now.&lt;/p&gt;

&lt;h3 id=&#34;home-3&#34;&gt;Home&lt;/h3&gt;

&lt;p&gt;One other thing &amp;mdash; let&amp;rsquo;s take a look at your home page:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;$ cat public/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;h4&amp;gt;&amp;lt;a href=&amp;quot;http://example.org/About/&amp;quot;&amp;gt;About&amp;lt;/a&amp;gt;&amp;lt;/h4&amp;gt;
    &amp;lt;h4&amp;gt;&amp;lt;a href=&amp;quot;http://example.org/article/Second/&amp;quot;&amp;gt;Second&amp;lt;/a&amp;gt;&amp;lt;/h4&amp;gt;
    &amp;lt;h4&amp;gt;&amp;lt;a href=&amp;quot;http://example.org/article/First/&amp;quot;&amp;gt;First&amp;lt;/a&amp;gt;&amp;lt;/h4&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Did you notice that the About link is listed with your articles?
That&amp;rsquo;s not exactly where we want it; so, let&amp;rsquo;s edit your home page template
(&lt;code&gt;layouts/index.html&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;$ vi themes/zafta/layouts/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;h2&amp;gt;Articles&amp;lt;/h2&amp;gt;
  {{- range first 10 .Data.Pages -}}
    {{- if eq .Type &amp;quot;article&amp;quot;}}
      &amp;lt;h4&amp;gt;&amp;lt;a href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;&amp;lt;/h4&amp;gt;
    {{- end -}}
  {{- end }}
  &amp;lt;h2&amp;gt;Pages&amp;lt;/h2&amp;gt;
  {{- range first 10 .Data.Pages -}}
    {{- if eq .Type &amp;quot;page&amp;quot; }}
      &amp;lt;h4&amp;gt;&amp;lt;a href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;&amp;lt;/h4&amp;gt;
    {{- end -}}
  {{- end }}
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
:wq
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s render your web site, and verify the results:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;$ rm -rf public/

$ hugo --verbose
INFO: {date} {source} Using config file: /tmp/mySite/config.toml
INFO: {date} {source} using a UnionFS for static directory comprised of:
INFO: {date} {source} Base: /tmp/mySite/themes/zafta/static
INFO: {date} {source} Overlay: /tmp/mySite/static/
INFO: {date} {source} syncing static files to /tmp/mySite/public/
Started building site
INFO: {date} {source} found taxonomies: map[string]string{&amp;quot;tag&amp;quot;:&amp;quot;tags&amp;quot;, &amp;quot;category&amp;quot;:&amp;quot;categories&amp;quot;}
WARN: {date} {source} &amp;quot;404.html&amp;quot; is rendered empty
0 draft content
0 future content
0 expired content
3 pages created
0 non-page files copied
0 paginator pages created
0 tags created
0 categories created
in 9 ms

$ cat public/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;h2&amp;gt;Articles&amp;lt;/h2&amp;gt;
      &amp;lt;h4&amp;gt;&amp;lt;a href=&amp;quot;http://example.org/article/Second/&amp;quot;&amp;gt;Second&amp;lt;/a&amp;gt;&amp;lt;/h4&amp;gt;
      &amp;lt;h4&amp;gt;&amp;lt;a href=&amp;quot;http://example.org/article/First/&amp;quot;&amp;gt;First&amp;lt;/a&amp;gt;&amp;lt;/h4&amp;gt;
  &amp;lt;h2&amp;gt;Pages&amp;lt;/h2&amp;gt;
      &amp;lt;h4&amp;gt;&amp;lt;a href=&amp;quot;http://example.org/About/&amp;quot;&amp;gt;About&amp;lt;/a&amp;gt;&amp;lt;/h4&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Good! This time, your home page has two Sections: &amp;ldquo;article&amp;rdquo; and &amp;ldquo;page&amp;rdquo;, and
each Section contains the correct set of headings and links.&lt;/p&gt;

&lt;h2 id=&#34;template-sharing&#34;&gt;Template Sharing&lt;/h2&gt;

&lt;p&gt;If you&amp;rsquo;ve been following along on your computer, you might&amp;rsquo;ve noticed that
your home page doesn&amp;rsquo;t show its title in your browser, although both of your
article pages do. That&amp;rsquo;s because we didn&amp;rsquo;t add your home page&amp;rsquo;s title to its
template (&lt;code&gt;layouts/index.html&lt;/code&gt;). That would be easy to do &amp;mdash; but instead,
let&amp;rsquo;s look at a better option.&lt;/p&gt;

&lt;p&gt;We can put the common information into a shared template.
These reside in the &lt;code&gt;layouts/partials/&lt;/code&gt; directory.&lt;/p&gt;

&lt;h3 id=&#34;header-footer&#34;&gt;Header &amp;amp; Footer&lt;/h3&gt;

&lt;p&gt;In Hugo (as elsewhere), a Partial is a template that&amp;rsquo;s intended to be used
within other templates. We&amp;rsquo;re going to create a Partial template that will
contain a header, for all of your page templates to use. That Partial will
enable us to maintain the header information in a single place, thus easing
our maintenance. Let&amp;rsquo;s create both the header (&lt;code&gt;layouts/partials/header.html&lt;/code&gt;)
and the footer (&lt;code&gt;layouts/partials/footer.html&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;$ vi themes/zafta/layouts/partials/header.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;title&amp;gt;{{ .Title }}&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
:wq

$ vi themes/zafta/layouts/partials/footer.html
  &amp;lt;h4&amp;gt;&amp;lt;a href=&amp;quot;{{ .Site.BaseURL }}&amp;quot;&amp;gt;Home&amp;lt;/a&amp;gt;&amp;lt;/h4&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
:wq
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;calling&#34;&gt;Calling&lt;/h3&gt;

&lt;p&gt;Any &lt;code&gt;partial&lt;/code&gt; is called relative to its conventional location
&lt;code&gt;layouts/partials/&lt;/code&gt;. So, you pass just the basename, followed by the context
(the period before the closing mustache). For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;{{ partial &amp;quot;header.html&amp;quot; . }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;from-home&#34;&gt;From Home&lt;/h4&gt;

&lt;p&gt;Let&amp;rsquo;s change your home page template (&lt;code&gt;layouts/index.html&lt;/code&gt;)
in order to use the new header Partial we just created:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;$ vi themes/zafta/layouts/index.html
{{ partial &amp;quot;header.html&amp;quot; . }}
  &amp;lt;h2&amp;gt;Articles&amp;lt;/h2&amp;gt;
  {{- range first 10 .Data.Pages -}}
    {{- if eq .Type &amp;quot;article&amp;quot;}}
      &amp;lt;h4&amp;gt;&amp;lt;a href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;&amp;lt;/h4&amp;gt;
    {{- end -}}
  {{- end }}
  &amp;lt;h2&amp;gt;Pages&amp;lt;/h2&amp;gt;
  {{- range first 10 .Data.Pages -}}
    {{- if eq .Type &amp;quot;page&amp;quot; }}
      &amp;lt;h4&amp;gt;&amp;lt;a href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;&amp;lt;/h4&amp;gt;
    {{- end -}}
  {{- end }}
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
:wq
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Render your web site and verify the results. Now, the title on your home page
should be &amp;ldquo;My New Hugo Site&amp;rdquo;. This comes from the &amp;ldquo;title&amp;rdquo; variable
in the &lt;code&gt;./config.toml&lt;/code&gt; file.&lt;/p&gt;

&lt;h4 id=&#34;from-default&#34;&gt;From Default&lt;/h4&gt;

&lt;p&gt;Let&amp;rsquo;s also edit the default templates (&lt;code&gt;layouts/_default/single.html&lt;/code&gt; and
&lt;code&gt;layouts/_default/list.html&lt;/code&gt;) to use your new Partials:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;$ vi themes/zafta/layouts/_default/single.html
{{ partial &amp;quot;header.html&amp;quot; . }}
  &amp;lt;h1&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
  &amp;lt;h6&amp;gt;{{ .Date.Format &amp;quot;Mon, Jan 2, 2006&amp;quot; }}&amp;lt;/h6&amp;gt;
  {{ .Content }}
{{ partial &amp;quot;footer.html&amp;quot; . -}}
:wq

$ vi themes/zafta/layouts/_default/list.html
{{ partial &amp;quot;header.html&amp;quot; . -}}
  &amp;lt;h1&amp;gt;Articles&amp;lt;/h1&amp;gt;
  {{- range first 10 .Data.Pages }}
    &amp;lt;h4&amp;gt;&amp;lt;a href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;&amp;lt;/h4&amp;gt;
  {{- end }}
{{ partial &amp;quot;footer.html&amp;quot; . -}}
:wq
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Render your web site and verify the results.
Now, the title of your About page should reflect the value of the &amp;ldquo;title&amp;rdquo;
variable in its corresponding Markdown file (&lt;code&gt;./content/About.md&lt;/code&gt;).
The same should be true for each of your article pages as well (i.e.,
&lt;code&gt;./content/article/First.md&lt;/code&gt; and &lt;code&gt;./content/article/Second.md&lt;/code&gt;).&lt;/p&gt;

&lt;h3 id=&#34;dry&#34;&gt;DRY&lt;/h3&gt;

&lt;p&gt;Don&amp;rsquo;t Repeat Yourself (also known as DRY) is a desirable goal,
in any kind of source code development &amp;mdash;
and Hugo&amp;rsquo;s partials do a fine job to help with that.&lt;/p&gt;

&lt;p&gt;Part of the art of good templates is knowing when to add new ones, and when
to edit existing ones. While you&amp;rsquo;re still figuring out the art of templates,
you should accept that you&amp;rsquo;ll do some refactoring &amp;mdash; Hugo makes this
easy and fast. And it&amp;rsquo;s okay to delay splitting your templates into Partials.&lt;/p&gt;

&lt;h2 id=&#34;section&#34;&gt;Section&lt;/h2&gt;

&lt;h3 id=&#34;date&#34;&gt;Date&lt;/h3&gt;

&lt;p&gt;Articles commonly display the date they were published
(or finalized) &amp;mdash; so, here, let&amp;rsquo;s do the same.&lt;/p&gt;

&lt;p&gt;The front-matter of your articles contains a &amp;ldquo;date&amp;rdquo; variable
(as discussed above). Hugo sets this, when it creates each content file.
Now, sometimes an article requires many days to prepare, so its actual
publishing date might be later than the front-matter&amp;rsquo;s &amp;ldquo;date&amp;rdquo;. However, for
simplicity&amp;rsquo;s sake, let&amp;rsquo;s pretend this is the date we want to display, each time.&lt;/p&gt;

&lt;p&gt;In Hugo, in order to format a variable date (or time),
we must do it by formatting the Go language &lt;a href=&#34;https://golang.org/pkg/time/&#34;&gt;reference
time&lt;/a&gt;; for example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;{{ .Date.Format &amp;quot;Mon, Jan 2, 2006&amp;quot; }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, your articles use the &lt;code&gt;layouts/_default/single.html&lt;/code&gt; template (see above).
Because that template includes a date-formatting snippet, they show a
nice looking date. However, your About page uses the same default template.
Unfortunately, now it too shows its creation date (which makes no sense)!&lt;/p&gt;

&lt;p&gt;There are a couple of ways to make the date display only for articles.
We could use an &amp;ldquo;if&amp;rdquo; statement, to display the date only when the Type equals
&amp;ldquo;article.&amp;rdquo; That is workable, and acceptable for web sites with only a couple
of content Types. It aligns with the principle of &amp;ldquo;code for today,&amp;rdquo; too.&lt;/p&gt;

&lt;h3 id=&#34;template-1&#34;&gt;Template&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s assume, though (for didactic purposes), that you&amp;rsquo;ve made your web site so
complex that you feel you must create a new template Type. In Hugo-speak, this
will be a new Section. It will contain your new, &amp;ldquo;article&amp;rdquo; Single template.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s restore your default Single template (&lt;code&gt;layouts/_default/single.html&lt;/code&gt;)
to its earlier state (before we forget):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;$ vi themes/zafta/layouts/_default/single.html
{{ partial &amp;quot;header.html&amp;quot; . }}
  &amp;lt;h1&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
  {{ .Content }}
{{ partial &amp;quot;footer.html&amp;quot; . -}}
:wq
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, let&amp;rsquo;s create your new template. If you remember Hugo&amp;rsquo;s rules,
the template engine will prefer this version over the default. The first step
is to create (within your theme) its Section&amp;rsquo;s directory: &lt;code&gt;layouts/article/&lt;/code&gt;.
Then, create a Single template (&lt;code&gt;layouts/article/single.html&lt;/code&gt;) within it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;$ mkdir themes/zafta/layouts/article

$ vi themes/zafta/layouts/article/single.html
{{ partial &amp;quot;header.html&amp;quot; . }}
  &amp;lt;h1&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
  &amp;lt;h6&amp;gt;{{ .Date.Format &amp;quot;Mon, Jan 2, 2006&amp;quot; }}&amp;lt;/h6&amp;gt;
  {{ .Content }}
{{ partial &amp;quot;footer.html&amp;quot; . -}}
:wq
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Basically, we moved the date logic &amp;mdash; from the default template, to the
new &amp;ldquo;article&amp;rdquo; Section, Single template: &lt;code&gt;layouts/article/single.html&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s render your web site and verify the results:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;$ rm -rf public/

$ hugo --verbose
INFO: {date} {source} Using config file: /tmp/mySite/config.toml
INFO: {date} {source} using a UnionFS for static directory comprised of:
INFO: {date} {source} Base: /tmp/mySite/themes/zafta/static
INFO: {date} {source} Overlay: /tmp/mySite/static/
INFO: {date} {source} syncing static files to /tmp/mySite/public/
Started building site
INFO: {date} {source} found taxonomies: map[string]string{&amp;quot;tag&amp;quot;:&amp;quot;tags&amp;quot;, &amp;quot;category&amp;quot;:&amp;quot;categories&amp;quot;}
WARN: {date} {source} &amp;quot;404.html&amp;quot; is rendered empty
0 draft content
0 future content
0 expired content
3 pages created
0 non-page files copied
0 paginator pages created
0 tags created
0 categories created
in 10 ms

$ cat public/article/First/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;title&amp;gt;First&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;

  &amp;lt;h1&amp;gt;First&amp;lt;/h1&amp;gt;
  &amp;lt;h6&amp;gt;Wed, Jan 18, 2040&amp;lt;/h6&amp;gt;
  &amp;lt;p&amp;gt;In vel ligula tortor. Aliquam erat volutpat.
Pellentesque at felis eu quam tincidunt dignissim.
Nulla facilisi.&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;Pellentesque tempus nisi et interdum convallis.
In quam ante, vulputate at massa et, rutrum
gravida dui. Phasellus tristique libero at ex.&amp;lt;/p&amp;gt;

  &amp;lt;h4&amp;gt;&amp;lt;a href=&amp;quot;http://example.org/&amp;quot;&amp;gt;Home&amp;lt;/a&amp;gt;&amp;lt;/h4&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

$ cat public/About/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;title&amp;gt;About&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;

  &amp;lt;h1&amp;gt;About&amp;lt;/h1&amp;gt;
  &amp;lt;p&amp;gt;Neque porro quisquam est qui dolorem
ipsum quia dolor sit amet consectetur
adipisci velit.&amp;lt;/p&amp;gt;

  &amp;lt;h4&amp;gt;&amp;lt;a href=&amp;quot;http://example.org/&amp;quot;&amp;gt;Home&amp;lt;/a&amp;gt;&amp;lt;/h4&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, as you can see, your articles show their dates,
and your About page (sensibly) doesn&amp;rsquo;t.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Create a Multilingual Site</title>
      <link>http://gohugo.io/tutorials/create-a-multilingual-site/</link>
      <pubDate>Wed, 08 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>http://gohugo.io/tutorials/create-a-multilingual-site/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Since v0.17 Hugo has built-in support for the creation of multilingual website. &lt;a href=&#34;http://gohugo.io/content/multilingual/&#34;&gt;Read more about it&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Hugo allows you to create a multilingual site from its built-in tools. This tutorial will show one way to do it, and assumes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You already know the basics about creating a Hugo site&lt;/li&gt;
&lt;li&gt;You have a separate domain name for each language&lt;/li&gt;
&lt;li&gt;You&amp;rsquo;ll use &lt;code&gt;/data&lt;/code&gt; files for some translation strings&lt;/li&gt;
&lt;li&gt;You&amp;rsquo;ll use single, combined &lt;code&gt;layout&lt;/code&gt; and &lt;code&gt;static&lt;/code&gt; folders&lt;/li&gt;
&lt;li&gt;You&amp;rsquo;ll use a subfolder for each language under &lt;code&gt;content&lt;/code&gt; and &lt;code&gt;public&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;site-configs&#34;&gt;Site Configs&lt;/h2&gt;

&lt;p&gt;Create your site configs in the root of your repository, for example for an English and Japanese site.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;English Config &lt;code&gt;config_en.toml&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;baseURL = &amp;quot;http://acme.com/&amp;quot;
title = &amp;quot;Acme Inc.&amp;quot;
contentDir = &amp;quot;content/en&amp;quot;
publishDir = &amp;quot;public/en&amp;quot;

[params]
    locale = &amp;quot;en-US&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Japanese Config &lt;code&gt;config_ja.toml&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;baseURL = &amp;quot;http://acme.jp/&amp;quot;
title = &amp;quot;有限会社アクミー&amp;quot;
contentDir = &amp;quot;content/ja&amp;quot;
publishDir = &amp;quot;public/ja&amp;quot;

[params]
    locale = &amp;quot;ja-JP&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you had more domains and languages, you would just create more config files. The standard &lt;code&gt;config.toml&lt;/code&gt; is what Hugo will run as a default, but since we&amp;rsquo;re creating language-specific ones, you&amp;rsquo;ll need to specify each config file when running &lt;code&gt;hugo server&lt;/code&gt; or just &lt;code&gt;hugo&lt;/code&gt; before deploying.&lt;/p&gt;

&lt;h2 id=&#34;prep-translation-strings-in-data&#34;&gt;Prep Translation Strings in &lt;code&gt;/data&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Create &lt;code&gt;.yaml&lt;/code&gt; (or &lt;code&gt;.json&lt;/code&gt; or &lt;code&gt;.toml&lt;/code&gt;) files for each language, under &lt;code&gt;/data/translations&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;English Strings &lt;code&gt;en-US.yaml&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;topSlogan: Acme Inc.
topSubslogan: You&#39;ll love us
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Japanese Strings &lt;code&gt;ja-JP.yaml&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;topSlogan: 有限会社アクミー
topSubslogan: キット勝つぞ
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In some cases, where there is more complex formatting within the strings you want to show, it might be better to employ some conditional logic in your template, to display a block of html per language.&lt;/p&gt;

&lt;h2 id=&#34;reference-strings-in-templates&#34;&gt;Reference Strings in templates&lt;/h2&gt;

&lt;p&gt;Now you can reference the strings in your templates. One way is to do it like in this &lt;code&gt;layouts/index.html&lt;/code&gt;, leveraging the fact that you have the locale set:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;{{ .Site.Params.locale }}&amp;quot;&amp;gt;
...
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;{{ if eq .Site.Params.locale &amp;quot;en-US&amp;quot; }}{{ if .IsHome }}Welcome to {{ end }}{{ end }}{{ .Title }}{{ if eq .Site.Params.locale &amp;quot;ja-JP&amp;quot; }}{{ if .IsHome }}へようこそ{{ end }}{{ end }}{{ if ne .Title .Site.Title }} : {{ .Site.Title }}{{ end }}&amp;lt;/title&amp;gt;
    ...
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
      &amp;lt;h1 class=&amp;quot;header&amp;quot;&amp;gt;{{ ( index $.Site.Data.translations $.Site.Params.locale ).topSlogan }}&amp;lt;/h1&amp;gt;
      &amp;lt;h3 class=&amp;quot;subheader&amp;quot;&amp;gt;{{ ( index $.Site.Data.translations $.Site.Params.locale ).topSubslogan }}&amp;lt;/h3&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above shows both techniques, using an &lt;code&gt;if eq&lt;/code&gt; and &lt;code&gt;else if eq&lt;/code&gt; to check the locale, and using &lt;code&gt;index&lt;/code&gt; to pull strings from the data file that matches the locale set in the site&amp;rsquo;s config file.&lt;/p&gt;

&lt;h2 id=&#34;customize-dates&#34;&gt;Customize Dates&lt;/h2&gt;

&lt;p&gt;At the time of this writing, Golang does not yet have support for internationalized locales, but if you do some work, you can simulate it. For example, if you want to use French month names, you can add a data file like &lt;code&gt;data/mois.yaml&lt;/code&gt; with this content:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;1: &amp;quot;janvier&amp;quot;
2: &amp;quot;février&amp;quot;
3: &amp;quot;mars&amp;quot;
4: &amp;quot;avril&amp;quot;
5: &amp;quot;mai&amp;quot;
6: &amp;quot;juin&amp;quot;
7: &amp;quot;juillet&amp;quot;
8: &amp;quot;août&amp;quot;
9: &amp;quot;septembre&amp;quot;
10: &amp;quot;octobre&amp;quot;
11: &amp;quot;novembre&amp;quot;
12: &amp;quot;décembre&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip; then index the non-English date names in your templates like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;time class=&amp;quot;post-date&amp;quot; datetime=&amp;quot;{{ .Date.Format &amp;quot;2006-01-02T15:04:05Z07:00&amp;quot; | safeHTML }}&amp;quot;&amp;gt;
  Article publié le {{ .Date.Day }} {{ index $.Site.Data.mois (printf &amp;quot;%d&amp;quot; .Date.Month) }} {{ .Date.Year }} (dernière modification le {{ .Lastmod.Day }} {{ index $.Site.Data.mois (printf &amp;quot;%d&amp;quot; .Lastmod.Month) }} {{ .Lastmod.Year }})
&amp;lt;/time&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This technique extracts the day, month and year by specifying &lt;code&gt;.Date.Day&lt;/code&gt;, &lt;code&gt;.Date.Month&lt;/code&gt;, and &lt;code&gt;.Date.Year&lt;/code&gt;, and uses the month number as a key, when indexing the month name data file.&lt;/p&gt;

&lt;h2 id=&#34;create-multilingual-content&#34;&gt;Create Multilingual Content&lt;/h2&gt;

&lt;p&gt;Now you can create markdown content in your languages, in the &lt;code&gt;content/en&lt;/code&gt; and &lt;code&gt;content/ja&lt;/code&gt; folders. The frontmatter stays the same on the key side, but the values would be set in each of the languages.&lt;/p&gt;

&lt;h2 id=&#34;run-hugo-server-or-deploy-commands&#34;&gt;Run Hugo Server or Deploy Commands&lt;/h2&gt;

&lt;p&gt;Once you have things set up, you can run &lt;code&gt;hugo server&lt;/code&gt; or &lt;code&gt;hugo&lt;/code&gt; before deploying. You can create scripts to do it, or as shell functions. Here are sample basic &lt;code&gt;zsh&lt;/code&gt; functions:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Live Reload with &lt;code&gt;hugo server&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;function hugoserver-com {
  cd /Users/me/dev/mainsite
  hugo server --buildDrafts --verbose --source=&amp;quot;/Users/me/dev/mainsite&amp;quot; --config=&amp;quot;/Users/me/dev/mainsite/config_en.toml&amp;quot; --port=1377
}
function hugoserver-jp {
  cd /Users/me/dev/mainsite
  hugo server --buildDrafts --verbose --source=&amp;quot;/Users/me/dev/mainsite&amp;quot; --config=&amp;quot;/Users/me/dev/mainsite/config_ja.toml&amp;quot; --port=1399
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Deploy with &lt;code&gt;hugo&lt;/code&gt; and &lt;code&gt;rsync&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;function hugodeploy-acmecom {
    rm -rf /tmp/acme.com
    hugo --config=&amp;quot;/Users/me/dev/mainsite/config_en.toml&amp;quot; -s /Users/me/dev/mainsite/ -d /tmp/acme.com
    rsync -avze &amp;quot;ssh -p 22&amp;quot; --delete /tmp/acme.com/ me@mywebhost.com:/home/me/webapps/acme_com_site
}

function hugodeploy-acmejp {
    rm -rf /tmp/acme.jp
    hugo --config=&amp;quot;/Users/me/dev/mainsite/config_ja.toml&amp;quot; -s /Users/me/dev/mainsite/ -d /tmp/acme.jp
    rsync -avze &amp;quot;ssh -p 22&amp;quot; --delete /tmp/acme.jp/ me@mywebhost.com:/home/me/webapps/acme_jp_site
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Adjust to fit your situation, setting dns, your webserver config, and other settings as appropriate.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Installing on Windows</title>
      <link>http://gohugo.io/tutorials/installing-on-windows/</link>
      <pubDate>Mon, 30 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://gohugo.io/tutorials/installing-on-windows/</guid>
      <description>

&lt;h1 id=&#34;installing-hugo-on-windows&#34;&gt;Installing Hugo on Windows&lt;/h1&gt;

&lt;p&gt;This tutorial aims to be a complete guide to installing Hugo on your Windows computer.&lt;/p&gt;

&lt;h2 id=&#34;assumptions&#34;&gt;Assumptions&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;We&amp;rsquo;ll call your website &lt;code&gt;example.com&lt;/code&gt; for the purpose of this tutorial.&lt;/li&gt;
&lt;li&gt;You will use &lt;code&gt;C:\Hugo\Sites&lt;/code&gt; as the starting point for your site.&lt;/li&gt;
&lt;li&gt;You will use &lt;code&gt;C:\Hugo\bin&lt;/code&gt; to store executable files.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;setup-your-directories&#34;&gt;Setup Your Directories&lt;/h2&gt;

&lt;p&gt;You&amp;rsquo;ll need a place to store the Hugo executable, your content (the files that you build), and the generated files (the HTML that Hugo builds for you).&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open Windows Explorer.&lt;/li&gt;
&lt;li&gt;Create a new folder: &lt;code&gt;C:\Hugo&lt;/code&gt; (assuming you want Hugo on your C drive – it can go anywhere.)&lt;/li&gt;
&lt;li&gt;Create a subfolder in the Hugo folder: &lt;code&gt;C:\Hugo\bin&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Create another subfolder in Hugo: &lt;code&gt;C:\Hugo\Sites&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;technical-users&#34;&gt;Technical users&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Download the latest zipped Hugo executable from the &lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;Hugo Releases&lt;/a&gt; page.&lt;/li&gt;
&lt;li&gt;Extract all contents to your &lt;code&gt;..\Hugo\bin&lt;/code&gt; folder.&lt;/li&gt;
&lt;li&gt;The hugo executable will be named as &lt;code&gt;hugo_hugo-version_platform_arch.exe&lt;/code&gt;. Rename that executable to &lt;code&gt;hugo.exe&lt;/code&gt; for ease of use.&lt;/li&gt;
&lt;li&gt;In PowerShell or your preferred CLI, add the &lt;code&gt;hugo.exe&lt;/code&gt; executable to your PATH by navigating to &lt;code&gt;C:\Hugo\bin&lt;/code&gt; (or the location of your hugo.exe file) and use the command &lt;code&gt;set PATH=%PATH%;C:\Hugo\bin&lt;/code&gt;. If the &lt;code&gt;hugo&lt;/code&gt; command does not work after a reboot, you may have to run the command prompt as administrator.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;less-technical-users&#34;&gt;Less technical users&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Go the &lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;Hugo Releases&lt;/a&gt; page.&lt;/li&gt;
&lt;li&gt;The latest release is announced on top. Scroll to the bottom of the release announcement to see the downloads. They&amp;rsquo;re all ZIP files.&lt;/li&gt;
&lt;li&gt;Find the Windows files near the bottom (they&amp;rsquo;re in alphabetical order, so Windows is last) – download either the 32-bit or 64-bit file depending on whether you have 32-bit or 64-bit Windows. (If you don&amp;rsquo;t know, &lt;a href=&#34;https://esupport.trendmicro.com/en-us/home/pages/technical-support/1038680.aspx&#34;&gt;see here&lt;/a&gt;.)&lt;/li&gt;
&lt;li&gt;Move the ZIP file into your &lt;code&gt;C:\Hugo\bin&lt;/code&gt; folder.&lt;/li&gt;
&lt;li&gt;Double-click on the ZIP file and extract its contents. Be sure to extract the contents into the same &lt;code&gt;C:\Hugo\bin&lt;/code&gt; folder – Windows will do this by default unless you tell it to extract somewhere else.&lt;/li&gt;
&lt;li&gt;You should now have three new files: hugo executable (example: hugo_0.18_windows_amd64.exe), license.md, and readme.md. (you can delete the ZIP download now.). Rename that hugo executable (hugo_hugo-version_platform_arch.exe) to hugo.exe for ease of use.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Now add Hugo to your Windows PATH settings:&lt;/p&gt;

&lt;h3 id=&#34;for-windows-10-users&#34;&gt;For Windows 10 users:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Right click on the &lt;strong&gt;Start&lt;/strong&gt; button.&lt;/li&gt;
&lt;li&gt;Click on &lt;strong&gt;System&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Click on &lt;strong&gt;Advanced System Settings&lt;/strong&gt; on the left.&lt;/li&gt;
&lt;li&gt;Click on the &lt;strong&gt;Environment Variables&amp;hellip;&lt;/strong&gt; button on the bottom.&lt;/li&gt;
&lt;li&gt;In the User variables section, find the row that starts with PATH (PATH will be all caps).&lt;/li&gt;
&lt;li&gt;Double-click on &lt;strong&gt;PATH&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Click the &lt;strong&gt;New&amp;hellip;&lt;/strong&gt; button.&lt;/li&gt;
&lt;li&gt;Type in the folder where &lt;code&gt;hugo.exe&lt;/code&gt; was extracted, which is &lt;code&gt;C:\Hugo\bin&lt;/code&gt; if you went by the instructions above. &lt;em&gt;The PATH entry should be the folder where Hugo lives, not the binary.&lt;/em&gt; Press &lt;kbd&gt;Enter&lt;/kbd&gt; when you&amp;rsquo;re done typing.&lt;/li&gt;
&lt;li&gt;Click OK at every window to exit.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;small&gt;Note that the path editor in Windows 10 was added in the large &lt;a href=&#34;https://blogs.windows.com/windowsexperience/2015/11/12/first-major-update-for-windows-10-available-today/&#34;&gt;November 2015 Update&lt;/a&gt;. You&amp;rsquo;ll need to have that or a later update installed for the above steps to work. You can see what Windows 10 build you have by clicking on the &lt;i class=&#34;fa fa-windows&#34;&gt;&lt;/i&gt;&amp;nbsp;Start button → Settings → System → About. See &lt;a href=&#34;http://www.howtogeek.com/236195/how-to-find-out-which-build-and-version-of-windows-10-you-have/&#34;&gt;here&lt;/a&gt; for more.)&lt;/small&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;for-windows-7-and-8-x-users&#34;&gt;For Windows 7 and 8.x users:&lt;/h3&gt;

&lt;p&gt;Windows 7 and 8.1 do not include the easy path editor included in Windows 10, so non-technical users on those platforms are advised to install a free third-party path editor like &lt;a href=&#34;http://eveditor.com/&#34;&gt;Windows Environment Variables Editor&lt;/a&gt; or &lt;a href=&#34;https://patheditor2.codeplex.com/&#34;&gt;Path Editor&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;verify-the-executable&#34;&gt;Verify the executable&lt;/h2&gt;

&lt;p&gt;Run a few commands to verify that the executable is ready to run, and then build a sample site to get started.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Open a command prompt window.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;At the prompt, type &lt;code&gt;hugo help&lt;/code&gt; and press the &lt;kbd&gt;Enter&lt;/kbd&gt; key. You should see output that starts with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;hljs nohighlight&#34;&gt;hugo is the main command, used to build your Hugo site.

Hugo is a Fast and Flexible Static Site Generator
built with love by spf13 and friends in Go.

Complete documentation is available at http://gohugo.io/.
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;If you do, then the installation is complete. If you don&amp;rsquo;t, double-check the path that you placed the &lt;code&gt;hugo.exe&lt;/code&gt; file in and that you typed that path correctly when you added it to your PATH variable. If you&amp;rsquo;re still not getting the output, post a note on the Hugo discussion list (in the &lt;code&gt;Support&lt;/code&gt; topic) with your command and the output.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;At the prompt, change your directory to the &lt;code&gt;Sites&lt;/code&gt; directory.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;hljs nohighlight&#34;&gt;C:\Program Files&gt; cd C:\Hugo\Sites
C:\Hugo\Sites&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run the command to generate a new site. I&amp;rsquo;m using &lt;code&gt;example.com&lt;/code&gt; as the name of the site.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;hljs nohighlight&#34;&gt;C:\Hugo\Sites&gt; hugo new site example.com
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You should now have a directory at &lt;code&gt;C:\Hugo\Sites\example.com&lt;/code&gt;.  Change into that directory and list the contents. You should get output similar to the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;hljs nohighlight&#34;&gt;C:\Hugo\Sites&amp;gt;cd example.com
C:\Hugo\Sites\example.com&amp;gt;dir
&amp;nbsp;Directory of C:\hugo\sites\example.com
&amp;nbsp;
04/13/2015  10:44 PM    &amp;lt;DIR&amp;gt;          .
04/13/2015  10:44 PM    &amp;lt;DIR&amp;gt;          ..
04/13/2015  10:44 PM    &amp;lt;DIR&amp;gt;          archetypes
04/13/2015  10:44 PM                83 config.toml
04/13/2015  10:44 PM    &amp;lt;DIR&amp;gt;          content
04/13/2015  10:44 PM    &amp;lt;DIR&amp;gt;          data
04/13/2015  10:44 PM    &amp;lt;DIR&amp;gt;          layouts
04/13/2015  10:44 PM    &amp;lt;DIR&amp;gt;          static
               1 File(s)             83 bytes
               7 Dir(s)   6,273,331,200 bytes free
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You now have Hugo installed and a site to work with. You need to add a layout (or theme), then create some content. Go to &lt;a href=&#34;http://gohugo.io/overview/quickstart/&#34;&gt;http://gohugo.io/overview/quickstart/&lt;/a&gt; for steps on doing that.&lt;/p&gt;

&lt;h2 id=&#34;troubleshooting&#34;&gt;Troubleshooting&lt;/h2&gt;

&lt;p&gt;@dhersam has created a nice video on common issues:&lt;/p&gt;

&lt;div class=&#34;video-container&#34;&gt;
&lt;iframe class=&#34;youtube-player&#34; type=&#34;text/html&#34; width=&#34;100%&#34; height=&#34;auto&#34; src=&#34;https://www.youtube.com/embed/c8fJIRNChmU&#34; allowfullscreen frameborder=&#34;0&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>Installing on a Mac</title>
      <link>http://gohugo.io/tutorials/installing-on-mac/</link>
      <pubDate>Sun, 22 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://gohugo.io/tutorials/installing-on-mac/</guid>
      <description>

&lt;h1 id=&#34;installing-hugo-on-a-mac&#34;&gt;Installing Hugo on a Mac&lt;/h1&gt;

&lt;p&gt;This tutorial aims to be a complete guide to installing Hugo on your Mac computer.&lt;/p&gt;

&lt;h2 id=&#34;assumptions&#34;&gt;Assumptions&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;You know how to open a terminal window.&lt;/li&gt;
&lt;li&gt;You&amp;rsquo;re running a modern 64-bit Mac.&lt;/li&gt;
&lt;li&gt;You will use &lt;code&gt;~/Sites&lt;/code&gt; as the starting point for your site.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;pick-your-method&#34;&gt;Pick Your Method&lt;/h2&gt;

&lt;p&gt;There are three ways to install Hugo on your Mac computer: the &lt;code&gt;brew&lt;/code&gt; utility, from the distribution, or from source.
There&amp;rsquo;s no &amp;ldquo;best&amp;rdquo; way to do this. You should use the method that works best for your use case.&lt;/p&gt;

&lt;p&gt;There are pros and cons for each.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Brew&lt;/code&gt; is the simplest and least work to maintain. The drawbacks
aren&amp;rsquo;t severe. The default package will be for the most recent
release, so it will not have bug-fixes until the next release
(unless you install it with the &lt;code&gt;--HEAD&lt;/code&gt; option). The release to
&lt;code&gt;brew&lt;/code&gt; may lag a few days behind because it has to be coordinated
with another team. Still, I&amp;rsquo;d recommend &lt;code&gt;brew&lt;/code&gt; if you want to work
from a stable, widely used source. It works well and is really easy
to update.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Downloading the tarball and installing from it is also easy. You have to have a few more command line skills. Updates are easy, too. You just repeat the process with the new binary. This gives you the flexibility to have multiple versions on your computer. If you don&amp;rsquo;t want to use &lt;code&gt;brew&lt;/code&gt;, then the binary is a good choice.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Compiling from source is the most work. The advantage is that you don&amp;rsquo;t have to wait for a release to add features or bug fixes. The disadvantage is that you need to spend more time managing the setup. It&amp;rsquo;s not a lot, but it&amp;rsquo;s more than with the other two options.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Since this is a &amp;ldquo;beginner&amp;rdquo; how-to, I&amp;rsquo;m going to cover the first two
options in detail and go over the third more quickly.&lt;/p&gt;

&lt;h2 id=&#34;brew&#34;&gt;Brew&lt;/h2&gt;

&lt;h3 id=&#34;step-1-install-brew-if-you-haven-t-already&#34;&gt;Step 1: Install &lt;code&gt;brew&lt;/code&gt; if you haven&amp;rsquo;t already&lt;/h3&gt;

&lt;p&gt;Go to the &lt;code&gt;brew&lt;/code&gt; website, &lt;a href=&#34;http://brew.sh/&#34;&gt;http://brew.sh/&lt;/a&gt;, and follow the directions there. The most important step is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When I did this, I had some problems with directory permissions. Searches on Google pointed me to pages that walked me through updating permissions on the &lt;code&gt;/usr/local&lt;/code&gt; directory. Seemed scary, but it&amp;rsquo;s worked well since.&lt;/p&gt;

&lt;h3 id=&#34;step-2-run-the-brew-command-to-install-hugo&#34;&gt;Step 2: Run the &lt;code&gt;brew&lt;/code&gt; command to install &lt;code&gt;hugo&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;First, update the formulae and Homebrew itself by running:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew update
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, install Hugo using Homebrew by running:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew install hugo
==&amp;gt; Downloading https://homebrew.bintray.com/bottles/hugo-0.13_1.yosemite.bottle.tar.gz
######################################################################## 100.0%
==&amp;gt; Pouring hugo-0.13_1.yosemite.bottle.tar.gz
🍺  /usr/local/Cellar/hugo/0.13_1: 4 files,  14M
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(Note: Replace &lt;code&gt;brew install hugo&lt;/code&gt; with &lt;code&gt;brew install hugo --HEAD&lt;/code&gt;
if you want the absolute latest version in development,
but beware—there might be bugs!)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Brew&lt;/code&gt; should have updated your path to include Hugo. Confirm by opening a new terminal window and running a few commands:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ # show the location of the hugo executable
$ which hugo
/usr/local/bin/hugo

$ # show the installed version
$ ls -l $( which hugo )
lrwxr-xr-x  1 mdhender admin  30 Mar 28 22:19 /usr/local/bin/hugo -&amp;gt; ../Cellar/hugo/0.13_1/bin/hugo

$ # verify that hugo runs correctly
$ hugo version
Hugo Static Site Generator v0.13 BuildDate: 2015-03-09T21:34:47-05:00
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step-3-you-re-done&#34;&gt;Step 3: You&amp;rsquo;re Done&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;ve installed Hugo. Now you need to set up your site. Read the
&lt;a href=&#34;http://gohugo.io/overview/quickstart/&#34;&gt;Quickstart guide&lt;/a&gt;, explore the rest of the
documentation, and if you still have questions
&lt;a href=&#34;http://discuss.gohugo.io/&#34; title=&#34;Discussion forum&#34;&gt;just ask!&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;from-tarball&#34;&gt;From Tarball&lt;/h2&gt;

&lt;h3 id=&#34;step-1-decide-on-the-location&#34;&gt;Step 1: Decide on the location&lt;/h3&gt;

&lt;p&gt;When installing from the tarball, you have to decide if you&amp;rsquo;re going to install the binary in &lt;code&gt;/usr/local/bin&lt;/code&gt; or in your home directory. There are three camps on this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Install it in &lt;code&gt;/usr/local/bin&lt;/code&gt; so that all the users on your system have access to it. This is a good idea because it&amp;rsquo;s a fairly standard place for executables. The downside is that you may need elevated privileges to put software into that location. Also, if there are multiple users on your system, they will all run the same version. Sometimes this can be an issue if you want to try out a new release.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Install it in &lt;code&gt;~/bin&lt;/code&gt; so that only you can execute it. This is a good idea because it&amp;rsquo;s easy to do, easy to maintain, and doesn&amp;rsquo;t require elevated privileges. The downside is that only you can run Hugo. If there are other users on your site, they have to maintain their own copies. That can lead to people running different versions. of course, this does make it easier for you to experiment with different releases.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Install it in your &lt;code&gt;sites&lt;/code&gt; directory. This is not a bad idea if you have only one site that you&amp;rsquo;re building. It keeps every thing in a single place. If you want to try out new releases, you can just make a copy of the entire site, update the Hugo executable, and have it.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All three locations will work for you. I&amp;rsquo;m going to document the second option, mostly because I&amp;rsquo;m comfortable with it.&lt;/p&gt;

&lt;h3 id=&#34;step-2-download-the-tarball&#34;&gt;Step 2: Download the Tarball&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Open &lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;https://github.com/spf13/hugo/releases&lt;/a&gt; in your browser.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Find the current release by scrolling down and looking for the green tag that reads &amp;ldquo;Latest Release.&amp;rdquo;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Download the current tarball for the Mac. The name will be something like &lt;code&gt;hugo_X.Y_osx-64bit.tgz&lt;/code&gt;, where &lt;code&gt;X.YY&lt;/code&gt; is the release number.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;By default, the tarball will be saved to your &lt;code&gt;~/Downloads&lt;/code&gt; directory. If you chose to use a different location, you&amp;rsquo;ll need to change that in the following steps.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;step-3-confirm-your-download&#34;&gt;Step 3: Confirm your download&lt;/h3&gt;

&lt;p&gt;Verify that the tarball wasn&amp;rsquo;t corrupted during the download:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tar tvf ~/Downloads/hugo_X.Y_osx-64bit.tgz
-rwxrwxrwx  0 0      0           0 Feb 22 04:02 hugo_X.Y_osx-64bit/hugo_X.Y_osx-64bit.tgz
-rwxrwxrwx  0 0      0           0 Feb 22 03:24 hugo_X.Y_osx-64bit/README.md
-rwxrwxrwx  0 0      0           0 Jan 30 18:48 hugo_X.Y_osx-64bit/LICENSE.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;.md&lt;/code&gt; files are documentation. The other file is the executable.&lt;/p&gt;

&lt;h3 id=&#34;step-4-install-into-your-bin-directory&#34;&gt;Step 4: Install into your bin directory&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ # create the directory if needed
$ mkdir -p ~/bin

$ # make it the working directory
$ cd ~/bin

$ # extract the tarball
$ tar -xvzf ~/Downloads/hugo_X.Y_osx-64bit.tgz
Archive:  hugo_X.Y_osx-64bit.tgz
  x ./
  x ./hugo
  x ./LICENSE.md
  x ./README.md

$ # verify that it runs
$ ./hugo version
Hugo Static Site Generator v0.13 BuildDate: 2015-02-22T04:02:30-06:00
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You may need to add your bin directory to your &lt;code&gt;PATH&lt;/code&gt; variable. The &lt;code&gt;which&lt;/code&gt; command will check for us. If it can find &lt;code&gt;hugo&lt;/code&gt;, it will print the full path to it. Otherwise, it will not print anything.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ # check if hugo is in the path
$ which hugo
/Users/USERNAME/bin/hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If &lt;code&gt;hugo&lt;/code&gt; is not in your &lt;code&gt;PATH&lt;/code&gt;, add it by updating your &lt;code&gt;~/.bash_profile&lt;/code&gt; file. First, start up an editor:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nano ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add a line to update your &lt;code&gt;PATH&lt;/code&gt; variable:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export PATH=$PATH:$HOME/bin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then save the file by pressing Control-X, then Y to save the file and return to the prompt.&lt;/p&gt;

&lt;p&gt;Close the terminal and then open a new terminal to pick up the changes to your profile. Verify by running the &lt;code&gt;which hugo&lt;/code&gt; command again.&lt;/p&gt;

&lt;h3 id=&#34;step-5-you-re-done&#34;&gt;Step 5: You&amp;rsquo;re Done&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;ve installed Hugo. Now you need to set up your site. Read the
&lt;a href=&#34;http://gohugo.io/overview/quickstart/&#34;&gt;Quickstart guide&lt;/a&gt;, explore the rest of the
documentation, and if you still have questions
&lt;a href=&#34;http://discuss.gohugo.io/&#34; title=&#34;Discussion forum&#34;&gt;just ask!&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;building-from-source&#34;&gt;Building from Source&lt;/h2&gt;

&lt;p&gt;If you want to compile Hugo yourself, you&amp;rsquo;ll need
&lt;a href=&#34;http://golang.org&#34;&gt;Go&lt;/a&gt;, which is also available from Homebrew: &lt;code&gt;brew
install go&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;step-1-get-the-source&#34;&gt;Step 1: Get the Source&lt;/h3&gt;

&lt;p&gt;If you want to compile a specific version, go to
&lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;https://github.com/spf13/hugo/releases&lt;/a&gt; and download the source code
for the version of your choice.  If you want to compile Hugo with all
the latest changes (which might include bugs), clone the Hugo
repository:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/spf13/hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step-2-compiling&#34;&gt;Step 2: Compiling&lt;/h3&gt;

&lt;p&gt;Make the directory containing the source your working directory, then
fetch Hugo&amp;rsquo;s dependencies:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir -p src/github.com/spf13
ln -sf $(pwd) src/github.com/spf13/hugo

# set the build path for Go
export GOPATH=$(pwd)

go get
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will fetch the absolute latest version of the dependencies, so if
Hugo fails to build it may be because the author of a dependency
introduced a breaking change.&lt;/p&gt;

&lt;p&gt;Then compile:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go build -o hugo main.go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then place the &lt;code&gt;hugo&lt;/code&gt; executable somewhere in your &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;step-3-you-re-done-1&#34;&gt;Step 3: You&amp;rsquo;re Done&lt;/h3&gt;

&lt;p&gt;You probably know where to go from here.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Automated deployments with Wercker</title>
      <link>http://gohugo.io/tutorials/automated-deployments/</link>
      <pubDate>Mon, 12 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://gohugo.io/tutorials/automated-deployments/</guid>
      <description>

&lt;h1 id=&#34;automated-deployments-with-wercker&#34;&gt;Automated deployments with Wercker&lt;/h1&gt;

&lt;p&gt;In this tutorial we will set up a basic Hugo project and then configure a free tool called Wercker to automatically deploy the generated site any time we add an article. We will deploy it to GitHub pages as that is easiest to set up, but you will see that we can use anything. This tutorial takes you through every step of the process, complete with screenshots and is fairly long.&lt;/p&gt;

&lt;p&gt;The  assumptions made for this tutorial are that you know how to use git for version control, and have a GitHub account. In case you are unfamiliar with these, in their &lt;a href=&#34;https://help.github.com/articles/set-up-git/&#34;&gt;help section&lt;/a&gt; GitHub has an explanation of how to install and use git and you can easily sign up for a free GitHub account as well.&lt;/p&gt;

&lt;h2 id=&#34;creating-a-basic-hugo-site&#34;&gt;Creating a basic Hugo site&lt;/h2&gt;

&lt;p&gt;There are already &lt;a href=&#34;http://gohugo.io/overview/quickstart/&#34;&gt;pages&lt;/a&gt; dedicated to describing how to set up a Hugo site so we will only go through the most basic steps required to get a site up and running before we dive into the Wercker configuration. All the work for setting up the project is done using the command line, and kept as simple as possible.&lt;/p&gt;

&lt;p&gt;Create the new site using the &lt;code&gt;hugo new site&lt;/code&gt; command, and we move into it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hugo new site hugo-wercker-example
cd hugo-wercker-example
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add the herring-cove theme by cloning it into the theme directory using the following commands.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir themes
cd themes
git clone https://github.com/spf13/herring-cove.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cloning the project like this will conflict with our own version control, so we remove the external git configuration.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rm -rf herring-cove/.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s add a quick &lt;strong&gt;about&lt;/strong&gt; page.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hugo new about.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we&amp;rsquo;ll edit contents/about.md to ensure it&amp;rsquo;s no longer a draft and add some text to it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hugo undraft content/about.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once completed it&amp;rsquo;s a good idea to do a quick check if everything is working by running&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hugo server --theme=herring-cove
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If everything is fine, you should be able to see something similar to the image below when you go to localhost:1313 in your browser.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://gohugo.io/img/tutorials/automated-deployments/creating-a-basic-hugo-site.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;setting-up-version-control&#34;&gt;Setting up version control&lt;/h2&gt;

&lt;p&gt;Adding git to our project is done by running the &lt;code&gt;git init&lt;/code&gt; command from the root directory of the project.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running &lt;code&gt;git status&lt;/code&gt; at this point will show you p entries: the &lt;strong&gt;config.toml&lt;/strong&gt; file, the &lt;strong&gt;themes&lt;/strong&gt; directory, the &lt;strong&gt;contents&lt;/strong&gt; directory, and the &lt;strong&gt;public&lt;/strong&gt; directory. We don&amp;rsquo;t want the &lt;strong&gt;public&lt;/strong&gt; directory version controlled however, as we will use wercker to generate that later on. Therefore, we&amp;rsquo;ll add a gitignore file that will exclude this using the following command.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &amp;quot;/public&amp;quot; &amp;gt;&amp;gt; .gitignore
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As we currently have no static files outside of the theme directory, Wercker might complain when we try to build the site later on. To prevent this, we simply have to add any file to the static folder. To keep it simple for now we&amp;rsquo;ll add a robots.txt file that will give all search engines full access to the site when it&amp;rsquo;s up.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &amp;quot;User-agent: *\nDisallow:&amp;quot; &amp;gt; static/robots.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After this we can add everything to the repository.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git commit -a -m &amp;quot;Initial commit&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;adding-the-project-to-github&#34;&gt;Adding the project to GitHub&lt;/h2&gt;

&lt;p&gt;First we&amp;rsquo;ll create a new repository. You can do this by clicking on the &lt;strong&gt;+&lt;/strong&gt; sign at the top right, or by going to &lt;a href=&#34;https://github.com/new&#34;&gt;https://github.com/new&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We then choose a name for the project (&lt;strong&gt;hugo-wercker-example&lt;/strong&gt;). When clicking on create repository GitHub displays the commands for adding an existing project to the site. The commands shown below are the ones used for this site, if you&amp;rsquo;re following along you will need to use the ones shown by GitHub. Once we&amp;rsquo;ve run those commands the project is in GitHub and we can move on to setting up the Wercker configuration.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git remote add origin git@github.com:YourUsername/hugo-wercker-example.git
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://gohugo.io/img/tutorials/automated-deployments/adding-the-project-to-github.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;welcome-to-wercker&#34;&gt;Welcome to wercker&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s start by setting up an account for Wercker. To do so we&amp;rsquo;ll go to &lt;a href=&#34;http://wercker.com&#34;&gt;http://wercker.com&lt;/a&gt; and click on the &lt;strong&gt;Sign up&lt;/strong&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://gohugo.io/img/tutorials/automated-deployments/wercker-sign-up.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;register&#34;&gt;Register&lt;/h2&gt;

&lt;p&gt;To make life easier for ourselves, we will then register using GitHub. If you don&amp;rsquo;t have a GitHub account, or don&amp;rsquo;t want to use it for your account, you can of course register with a username and password as well.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://gohugo.io/img/tutorials/automated-deployments/wercker-sign-up-page.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;connect-github-bitbucket&#34;&gt;Connect GitHub/Bitbucket&lt;/h2&gt;

&lt;p&gt;After you are registered, you will need to link your GitHub and/or Bitbucket account to Wercker. You do this by going to your profile settings, and then &amp;ldquo;Git connections&amp;rdquo; If you registered using GitHub it will most likely look like the image below. To connect a missing service, simply click on the connect button which will then send you to either GitHub or Bitbucket where you might need to log in and approve their access to your account.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://gohugo.io/img/tutorials/automated-deployments/wercker-git-connections.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;add-your-project&#34;&gt;Add your project&lt;/h2&gt;

&lt;p&gt;Now that we&amp;rsquo;ve got all the preliminaries out of the way, it&amp;rsquo;s time to set up our application. For this we click on the &lt;strong&gt;+ Create&lt;/strong&gt; button next to Applications, and then we&amp;rsquo;ll choose to use GitHub as our provider.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://gohugo.io/img/tutorials/automated-deployments/wercker-add-app.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;select-a-repository&#34;&gt;Select a repository&lt;/h2&gt;

&lt;p&gt;Clicking this will make Wercker show you all the repositories you have on GitHub, but you can easily filter them as well. So we search for our repository, select it, and then click on &amp;ldquo;Use selected repo&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://gohugo.io/img/tutorials/automated-deployments/wercker-select-repository.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;select-the-repository-owner&#34;&gt;Select the repository owner&lt;/h2&gt;

&lt;p&gt;In the next step, Wercker asks you to select the repository owner. Just select your own GitHub account and continue.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://gohugo.io/img/tutorials/automated-deployments/wercker-select-owner.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;configure-access&#34;&gt;Configure access&lt;/h2&gt;

&lt;p&gt;This step can be slightly tricky. As Wercker doesn&amp;rsquo;t access to check out your private projects by default it will ask you what you want to do. When your project is public, as needs to be the case if you wish to use GitHub Pages, the top choice is recommended. When you use this it will simply check out the code in the same way anybody visiting the project on GitHub can do.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://gohugo.io/img/tutorials/automated-deployments/wercker-access.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;wercker-yml&#34;&gt;Wercker.yml&lt;/h2&gt;

&lt;p&gt;Wercker will now attempt to create an initial &lt;em&gt;wercker.yml&lt;/em&gt; file for you. Or rather, it will create the code you can copy into it yourself. Because there is nothing special about our project according to Wercker, we will simply get the &lt;code&gt;debian&lt;/code&gt; box. So what we do now is create a &lt;em&gt;wercker.yml&lt;/em&gt; file in the root of our project that contains the provided configuration, and after we finish setting up the app we will expand this file to make it actually do something.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://gohugo.io/img/tutorials/automated-deployments/werckeryml.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;public-or-not&#34;&gt;Public or not&lt;/h2&gt;

&lt;p&gt;This is a personal choice, you can make an app public so that everyone can see more details about it. This doesn&amp;rsquo;t give you any real benefits either way in general, although as part of the tutorial I have of course made this app public so you can see it in action &lt;a href=&#34;https://app.wercker.com/#applications/5586dcbdaf7de9c51b02b0d5&#34;&gt;yourself&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://gohugo.io/img/tutorials/automated-deployments/public-or-not.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;and-we-ve-got-an-app&#34;&gt;And we&amp;rsquo;ve got an app&lt;/h2&gt;

&lt;p&gt;The application is added now, and Wercker will be offering you the chance to trigger a build. As we haven&amp;rsquo;t pushed up the &lt;strong&gt;wercker.yml&lt;/strong&gt; file however, we will politely decline this option.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://gohugo.io/img/tutorials/automated-deployments/and-we-ve-got-an-app.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;adding-steps&#34;&gt;Adding steps&lt;/h2&gt;

&lt;p&gt;And now we&amp;rsquo;re going to add the steps themselves. First, we go to the &amp;ldquo;Registry&amp;rdquo; action in the top menu and then search for &amp;ldquo;hugo build&amp;rdquo;. The first result is the &lt;strong&gt;Hugo-Build&lt;/strong&gt; task, which we select.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://gohugo.io/img/tutorials/automated-deployments/wercker-search.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;using-hugo-build&#34;&gt;Using Hugo-Build&lt;/h2&gt;

&lt;p&gt;Inside the details of this step you will see how to use it. At the top is a summary for the very basic usage, but when scrolling down you go through the README of the step which will usually contain more details about the advanced options available and a full example of using the step.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re not going to use any of the advanced features in this tutorial, so we&amp;rsquo;ll return to our project and add the details we need to our wercker.yml file so that it looks like the below. Wercker also has a &lt;a href=&#34;http://devcenter.wercker.com/articles/werckeryml/validate.html&#34;&gt;page&lt;/a&gt; for validating wercker.yml files, and it&amp;rsquo;s usually a good idea to do so before committing changes as minor typos might cause it to fail.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;box: debian
build:
  steps:
    - arjen/hugo-build:
        version: &amp;quot;0.14&amp;quot;
        theme: herring-cove
        flags: --buildDrafts=true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This concludes the first step, so we&amp;rsquo;ll test that it all works as it should by pushing up our wercker.yml file and seeing the magic at work.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git commit -a -m &amp;quot;Add wercker.yml&amp;quot;
git push origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once completed a nice tick should have appeared in front of your first build, and if you want you can look at the details by clicking on it. However, we&amp;rsquo;re not done yet as we still need to deploy it to GitHub Pages.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://gohugo.io/img/tutorials/automated-deployments/using-hugo-build.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;adding-a-github-pages-step&#34;&gt;Adding a GitHub Pages step&lt;/h2&gt;

&lt;p&gt;In order to deploy to GitHub Pages we need to add a deploy step. Once again searching through the Steps repository we find that the most popular step is the &lt;strong&gt;lukevevier/gh-pages&lt;/strong&gt; step so we add the configuration for that to our wercker.yml file. Additionally we need to ensure that the box we run on has git and ssh installed. We can do this using the &lt;strong&gt;install-packages&lt;/strong&gt; command, which then turns the wercker.yml file into this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;box: debian
build:
  steps:
    - arjen/hugo-build:
        version: &amp;quot;0.14&amp;quot;
        theme: herring-cove
        flags: --buildDrafts=true
deploy:
  steps:
    - install-packages:
        packages: git ssh-client
    - lukevivier/gh-pages@0.2.1:
        token: $GIT_TOKEN
        domain: hugo-wercker.ig.nore.me
        basedir: public
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;How does the GitHub Pages configuration work? We&amp;rsquo;ve selected a couple of things, first the domain we want to use for the site. Configuring this here will ensure that GitHub Pages is aware of the domain you want to use.&lt;/p&gt;

&lt;p&gt;Secondly we&amp;rsquo;ve configured the basedir to &lt;strong&gt;public&lt;/strong&gt;, this is the directory that will be used as the website on GitHub Pages.&lt;/p&gt;

&lt;p&gt;And lastly, you can see here that this has a &lt;strong&gt;$GIT_TOKEN&lt;/strong&gt; variable. This is used for pushing our changes up to GitHub and we will need to configure this before we can do that. We do this by going to our app&amp;rsquo;s settings and clicking on &lt;strong&gt;Deploy targets&lt;/strong&gt;. Now, we &lt;strong&gt;Add deploy target&lt;/strong&gt; and select &lt;strong&gt;Custom deploy&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://gohugo.io/img/tutorials/automated-deployments/adding-a-github-pages-step.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;configure-the-deploy-step&#34;&gt;Configure the deploy step&lt;/h2&gt;

&lt;p&gt;Simply fill in the name, and make sure you enable &lt;strong&gt;auto deploy&lt;/strong&gt; from the &lt;strong&gt;master&lt;/strong&gt; branch. Next you add a variable for the &lt;strong&gt;GIT_TOKEN&lt;/strong&gt;, for this you&amp;rsquo;ll need to create an access token in GitHub. How to do that is described on a &lt;a href=&#34;https://help.github.com/articles/creating-an-access-token-for-command-line-use/&#34;&gt;GitHub help page&lt;/a&gt;. With the deploy step configured in Wercker, we can push the updated wercker.yml file to GitHub and it will create the GitHub pages site for us. The example site we used here is accessible under hugo-wercker.ig.nore.me&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://gohugo.io/img/tutorials/automated-deployments/configure-the-deploy-step.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;From now on, any time you want to put a new post on your blog all you need to do is push your new page to GitHub and the rest will happen automatically. The source code for the example site used here is available on &lt;a href=&#34;https://github.com/ArjenSchwarz/hugo-wercker-example&#34;&gt;GitHub&lt;/a&gt;, as is the &lt;a href=&#34;https://github.com/ArjenSchwarz/wercker-step-hugo-build&#34;&gt;Hugo Build step&lt;/a&gt; itself.&lt;/p&gt;

&lt;p&gt;If you want to see an example of how you can deploy to S3 instead of GitHub pages, take a look at &lt;a href=&#34;http://devcenter.wercker.com/docs/deploy/s3.html&#34;&gt;Wercker&amp;rsquo;s documentation&lt;/a&gt; about how to set that up.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Accented Categories</title>
      <link>http://gohugo.io/troubleshooting/categories-with-accented-characters/</link>
      <pubDate>Thu, 08 Jan 2015 16:32:00 -0700</pubDate>
      
      <guid>http://gohugo.io/troubleshooting/categories-with-accented-characters/</guid>
      <description>

&lt;h2 id=&#34;trouble-categories-with-accented-characters&#34;&gt;Trouble: Categories with accented characters&lt;/h2&gt;

&lt;p&gt;One of my categories is named &amp;ldquo;Le-carré,&amp;rdquo; but the link ends up being generated like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;categories/le-carr%C3%A9
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And not working. Is there an easy fix for this that I&amp;rsquo;m overlooking?&lt;/p&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;p&gt;Mac OS X user?  If so, you are likely a victim of HFS Plus file system&amp;rsquo;s insistence to store the &amp;ldquo;é&amp;rdquo; (U+00E9) character in Normal Form Decomposed (NFD) mode, i.e. as &amp;ldquo;e&amp;rdquo; + &amp;ldquo;  ́&amp;rdquo; (U+0065 U+0301).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;le-carr%C3%A9&lt;/code&gt; is actually correct, &lt;code&gt;%C3%A9&lt;/code&gt; being the UTF-8 version of U+00E9 as expected by the web server.  Problem is, OS X turns [U+00E9] into [U+0065 U+0301], and thus &lt;code&gt;le-carr%C3%A9&lt;/code&gt; no longer works.  Instead, only &lt;code&gt;le-carre%CC%81&lt;/code&gt; ending with &lt;code&gt;e%CC%81&lt;/code&gt; would match that [U+0065 U+0301] at the end.&lt;/p&gt;

&lt;p&gt;This is unique to OS X.  The rest of the world does not do this, and most certainly not your web server which is most likely running Linux.  This is not a Hugo-specific problem either.  Other people have been bitten by this when they have accented characters in their HTML files.&lt;/p&gt;

&lt;p&gt;Nor is this problem specific to Latin scripts.  Japanese Mac users often run into the same issue, e.g. with &lt;code&gt;だ&lt;/code&gt; decomposing into &lt;code&gt;た&lt;/code&gt; and &lt;code&gt;&amp;#x3099;&lt;/code&gt;.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Rsync 3.x to the rescue!  From &lt;a href=&#34;http://serverfault.com/questions/397420/converting-utf-8-nfd-filenames-to-utf-8-nfc-in-either-rsync-or-afpd&#34;&gt;an answer posted on Server Fault&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can use rsync&amp;rsquo;s &lt;code&gt;--iconv&lt;/code&gt; option to convert between UTF-8 NFC &amp;amp; NFD, at least if you&amp;rsquo;re on a Mac. There is a special &lt;code&gt;utf-8-mac&lt;/code&gt; character set that stands for UTF-8 NFD. So to copy files from your Mac to your web server, you&amp;rsquo;d need to run something like:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rsync -a --iconv=utf-8-mac,utf-8 localdir/ mywebserver:remotedir/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will convert all the local filenames from UTF-8 NFD to UTF-8 NFC on the remote server. The files&amp;rsquo; contents won&amp;rsquo;t be affected.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Please make sure you have the latest version rsync 3.x installed.  The rsync that ships with OS X (even the latest 10.10 Yosemite) is the horribly old at version 2.6.9 protocol version 29.  The &lt;code&gt;--iconv&lt;/code&gt; flag is new in rsync 3.x.&lt;/p&gt;

&lt;h3 id=&#34;references&#34;&gt;References&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://discuss.gohugo.io/t/categories-with-accented-characters/505&#34;&gt;http://discuss.gohugo.io/t/categories-with-accented-characters/505&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://serverfault.com/questions/397420/converting-utf-8-nfd-filenames-to-utf-8-nfc-in-either-rsync-or-afpd&#34;&gt;Converting UTF-8 NFD filenames to UTF-8 NFC, in either rsync or afpd&lt;/a&gt; (Server Fault)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wiki.apache.org/subversion/NonNormalizingUnicodeCompositionAwareness&#34;&gt;http://wiki.apache.org/subversion/NonNormalizingUnicodeCompositionAwareness&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Unicode_equivalence#Example&#34;&gt;https://en.wikipedia.org/wiki/Unicode_equivalence#Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://zaiste.net/2012/07/brand_new_rsync_for_osx/&#34;&gt;http://zaiste.net/2012/07/brand_new_rsync_for_osx/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gogo244.wordpress.com/2014/09/17/drived-me-crazy-convert-utf-8-mac-to-utf-8/&#34;&gt;https://gogo244.wordpress.com/2014/09/17/drived-me-crazy-convert-utf-8-mac-to-utf-8/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;As explained in the Japanese Perl Users article &lt;a href=&#34;http://perl-users.jp/articles/advent-calendar/2010/english/24&#34;&gt;Encode::UTF8Mac makes you happy while handling file names on MacOSX&lt;/a&gt;.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Themes Overview</title>
      <link>http://gohugo.io/themes/overview/</link>
      <pubDate>Mon, 12 May 2014 10:03:52 +0000</pubDate>
      
      <guid>http://gohugo.io/themes/overview/</guid>
      <description>&lt;p&gt;Hugo provides a robust theming system which is simple, yet capable of producing
even the most complicated websites.&lt;/p&gt;

&lt;p&gt;The Hugo community has created &lt;a href=&#34;//themes.gohugo.io/&#34;&gt;a wide variety of beautiful themes&lt;/a&gt;, as demoed at &lt;a href=&#34;//themes.gohugo.io/&#34;&gt;themes.gohugo.io&lt;/a&gt;,
ready for using in your own site.&lt;/p&gt;

&lt;p&gt;Hugo themes have been designed to be the perfect balance between
simplicity and functionality. Hugo themes are powered by the excellent
Go template library. If you are new to Go templates, see our &lt;a href=&#34;http://gohugo.io/templates/go-templates/&#34;&gt;primer on
Go templates&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Hugo themes support all modern features you come to expect. They are
structured in such a way to eliminate code duplication. Themes are also
designed to be very easy to customize while retaining the ability to
maintain upgradeability as the upstream theme changes.&lt;/p&gt;

&lt;p&gt;Hugo currently doesn’t ship with a “default” theme, allowing the user to
pick whichever theme best suits their project.&lt;/p&gt;

&lt;p&gt;We hope you will find Hugo themes perfect for your site.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hosting on GitHub Pages</title>
      <link>http://gohugo.io/tutorials/github-pages-blog/</link>
      <pubDate>Fri, 21 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://gohugo.io/tutorials/github-pages-blog/</guid>
      <description>

&lt;p&gt;&lt;em&gt;This tutorial was contributed by &lt;a href=&#34;http://spencerlyon.com/&#34;&gt;Spencer Lyon&lt;/a&gt; (Personal/Organization Pages) and &lt;a href=&#34;https://github.com/gunnarmorling/&#34;&gt;Gunnar Morling&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;This tutorial describes how to deploy your Hugo based website to &lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub pages&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The following sections are based on the assumption that you are working with a &amp;ldquo;Project Pages Site&amp;rdquo;.
This means that you&amp;rsquo;ll have your Hugo sources and the generated HTML output within a single repository
(in contrast, with a &amp;ldquo;User/Organization Pages Site&amp;rdquo;, you&amp;rsquo;d have one repo for the sources and another repo for the published HTML files;
refer to the &lt;a href=&#34;https://help.github.com/articles/user-organization-and-project-pages/&#34;&gt;GitHub Pages docs&lt;/a&gt; to learn more).&lt;/p&gt;

&lt;h2 id=&#34;deployment-via-docs-folder-on-master-branch&#34;&gt;Deployment via &lt;em&gt;/docs&lt;/em&gt; folder on master branch&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://help.github.com/articles/configuring-a-publishing-source-for-github-pages/#publishing-your-github-pages-site-from-a-docs-folder-on-your-master-branch&#34;&gt;As described&lt;/a&gt; in the GitHub Pages docs, you can deploy from a folder called &lt;em&gt;docs&lt;/em&gt; on your master branch.
This requires to change the Hugo publish directory in the site config (e.g. &lt;em&gt;config.toml&lt;/em&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;publishDir: &amp;quot;docs&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After running &lt;code&gt;hugo&lt;/code&gt;, push your master branch to the remote repo and choose the &lt;em&gt;docs&lt;/em&gt; folder as the website source of your repo
(in your GitHub project, go to &amp;ldquo;Settings &amp;rdquo; -&amp;gt; &amp;ldquo;GitHub Pages&amp;rdquo; -&amp;gt; &amp;ldquo;Source&amp;rdquo; -&amp;gt; Select &amp;ldquo;master branch /docs folder&amp;rdquo;).
If that option isn&amp;rsquo;t enabled, you likely haven&amp;rsquo;t pushed your &lt;em&gt;docs&lt;/em&gt; folder yet.&lt;/p&gt;

&lt;p&gt;This is the simplest approach but requires the usage of a non-standard publish directory
(GitHub Pages cannot be configured to use another directory than &lt;em&gt;docs&lt;/em&gt; currently).
Also the presence of generated files on the master branch may not be to eveyone&amp;rsquo;s taste.&lt;/p&gt;

&lt;h2 id=&#34;deployment-via-gh-pages-branch&#34;&gt;Deployment via gh-pages branch&lt;/h2&gt;

&lt;p&gt;Alternatively, you can deploy site through a separate branch called &amp;ldquo;gh_pages&amp;rdquo;.
That approach is a bit more complex but has some advantages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It keeps sources and generated HTML in two different branches&lt;/li&gt;
&lt;li&gt;It uses the default &lt;em&gt;public&lt;/em&gt; folder&lt;/li&gt;
&lt;li&gt;It keeps the histories of source branch and gh-pages branch fully separated from each other&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;preparations&#34;&gt;Preparations&lt;/h3&gt;

&lt;p&gt;These steps only need to be done once (replace &amp;ldquo;upstream&amp;rdquo; with the name of your remote, e.g. &amp;ldquo;origin&amp;rdquo;):
First, add the &lt;em&gt;public&lt;/em&gt; folder to &lt;em&gt;.gitignore&lt;/em&gt; so it&amp;rsquo;s ignored on the master branch:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo &amp;quot;public&amp;quot; &amp;gt;&amp;gt; .gitignore
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then initialize the gh-pages branch as an empty &lt;a href=&#34;https://git-scm.com/docs/git-checkout/#git-checkout---orphanltnewbranchgt&#34;&gt;orphan branch&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git checkout --orphan gh-pages
git reset --hard
git commit --allow-empty -m &amp;quot;Initializing gh-pages branch&amp;quot;
git push upstream gh-pages
git checkout master
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;building-and-deployment&#34;&gt;Building and Deployment&lt;/h3&gt;

&lt;p&gt;Now check out the gh-pages branch into your &lt;em&gt;public&lt;/em&gt; folder, using git&amp;rsquo;s &lt;a href=&#34;https://git-scm.com/docs/git-worktree&#34;&gt;worktree feature&lt;/a&gt;
(essentially, it allows you to have multiple branches of the same local repo to be checked out in different directories):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rm -rf public
git worktree add -B gh-pages public upstream/gh-pages
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Regenerate the site using Hugo and commit the generated files on the gh-pages branch:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo
cd public &amp;amp;&amp;amp; git add --all &amp;amp;&amp;amp; git commit -m &amp;quot;Publishing to gh-pages&amp;quot; &amp;amp; cd ..
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the changes in your local gh-pages branch look alright, push them to the remote repo:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git push upstream gh-pages
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After a short while you&amp;rsquo;ll see the updated contents on your GitHub Pages site.&lt;/p&gt;

&lt;h3 id=&#34;putting-it-into-a-script&#34;&gt;Putting it into a script&lt;/h3&gt;

&lt;p&gt;To automate these steps, you can create a script _scripts/publish_to&lt;em&gt;ghpages.sh&lt;/em&gt; with the following contents:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/sh

DIR=$(dirname &amp;quot;$0&amp;quot;)

cd $DIR/..

if [[ $(git status -s) ]]
then
    echo &amp;quot;The working directory is dirty. Please commit any pending changes.&amp;quot;
    exit 1;
fi

echo &amp;quot;Deleting old publication&amp;quot;
rm -rf public
mkdir public
git worktree prune
rm -rf .git/worktrees/public/

echo &amp;quot;Checking out gh-pages branch into public&amp;quot;
git worktree add -B gh-pages public upstream/gh-pages

echo &amp;quot;Removing existing files&amp;quot;
rm -rf public/*

echo &amp;quot;Generating site&amp;quot;
hugo

echo &amp;quot;Updating gh-pages branch&amp;quot;
cd public &amp;amp;&amp;amp; git add --all &amp;amp;&amp;amp; git commit -m &amp;quot;Publishing to gh-pages (publish.sh)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will abort if there are pending changes in the working directory and also makes sure that all previously existing output files are removed.
Adjust the script to taste, e.g. to include the final push to the remote repository if you don&amp;rsquo;t need to take a look at the gh-pages branch before pushing. Or adding &lt;code&gt;echo yourdomainname.com &amp;gt;&amp;gt; CNAME&lt;/code&gt; if you set up for your gh-pages to use customize domain.&lt;/p&gt;

&lt;h2 id=&#34;deployment-with-git-2-4-and-earlier&#34;&gt;Deployment with Git 2.4 and earlier&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;worktree&lt;/code&gt; command was only introduced in Git 2.5.
If you are still on an earlier version and cannot update, you can simply clone your local repo into the &lt;em&gt;public&lt;/em&gt; directory, only keeping the gh-pages branch:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone .git --branch gh-pages public
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Having re-generated the site, you&amp;rsquo;d push back the gh-pages branch to your primary local repo:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd public &amp;amp;&amp;amp; git add --all &amp;amp;&amp;amp; git commit -m &amp;quot;Publishing to gh-pages&amp;quot; &amp;amp;&amp;amp; git push origin gh-pages
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The other steps are the same as with the worktree approach.&lt;/p&gt;

&lt;h2 id=&#34;hosting-personal-organization-pages&#34;&gt;Hosting Personal/Organization Pages&lt;/h2&gt;

&lt;p&gt;As mentioned &lt;a href=&#34;https://help.github.com/articles/user-organization-and-project-pages/&#34;&gt;in this GitHub&amp;rsquo;s article&lt;/a&gt;, besides project pages, you may also want to host a user/organization page. Here are the key differences:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;You must use the &lt;code&gt;username.github.io&lt;/code&gt; naming scheme.&lt;/li&gt;
&lt;li&gt;Content from the &lt;code&gt;master&lt;/code&gt; branch will be used to build and publish your GitHub Pages site.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;It becomes much simpler in that case: we&amp;rsquo;ll create two separate repos, one for Hugo&amp;rsquo;s content, and a git submodule with the &lt;code&gt;public&lt;/code&gt; folder&amp;rsquo;s content in it.&lt;/p&gt;

&lt;p&gt;Step by step:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create on GitHub &lt;code&gt;&amp;lt;your-project&amp;gt;-hugo&lt;/code&gt; repository (it will host Hugo&amp;rsquo;s content)&lt;/li&gt;
&lt;li&gt;Create on GitHub &lt;code&gt;&amp;lt;username&amp;gt;.github.io&lt;/code&gt; repository (it will host the &lt;code&gt;public&lt;/code&gt; folder: the static website)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git clone &amp;lt;&amp;lt;your-project&amp;gt;-hugo-url&amp;gt; &amp;amp;&amp;amp; cd &amp;lt;your-project&amp;gt;-hugo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Make your website work locally (&lt;code&gt;hugo server -t &amp;lt;yourtheme&amp;gt;&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Once you are happy with the results, &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;C&lt;/kbd&gt; (kill server) and &lt;code&gt;rm -rf public&lt;/code&gt; (don&amp;rsquo;t worry, it can always be regenerated with &lt;code&gt;hugo -t &amp;lt;yourtheme&amp;gt;&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git submodule add -b master git@github.com:&amp;lt;username&amp;gt;/&amp;lt;username&amp;gt;.github.io.git public&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Almost done: add a &lt;code&gt;deploy.sh&lt;/code&gt; script to help you (and make it executable: &lt;code&gt;chmod +x deploy.sh&lt;/code&gt;):&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash

echo -e &amp;quot;\033[0;32mDeploying updates to GitHub...\033[0m&amp;quot;

# Build the project.
hugo # if using a theme, replace by `hugo -t &amp;lt;yourtheme&amp;gt;`

# Go To Public folder
cd public
# Add changes to git.
git add -A

# Commit changes.
msg=&amp;quot;rebuilding site `date`&amp;quot;
if [ $# -eq 1 ]
  then msg=&amp;quot;$1&amp;quot;
fi
git commit -m &amp;quot;$msg&amp;quot;

# Push source and build repos.
git push origin master

# Come Back
cd ..
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;./deploy.sh &amp;quot;Your optional commit message&amp;quot;&lt;/code&gt; to send changes to &lt;code&gt;&amp;lt;username&amp;gt;.github.io&lt;/code&gt; (careful, you may also want to commit changes on the &lt;code&gt;&amp;lt;your-project&amp;gt;-hugo&lt;/code&gt; repo).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That&amp;rsquo;s it! Your personal page is running at &lt;a href=&#34;http://username.github.io/&#34;&gt;http://username.github.io/&lt;/a&gt; (after up to 10 minutes delay).&lt;/p&gt;

&lt;h2 id=&#34;using-a-custom-domain&#34;&gt;Using a custom domain&lt;/h2&gt;

&lt;p&gt;If you&amp;rsquo;d like to use a custom domain for your GitHub Pages site, create a file &lt;em&gt;static/CNAME&lt;/em&gt; with the domain name as its sole contents.
This will put the CNAME file to the root of the published site as required by GitHub Pages.&lt;/p&gt;

&lt;p&gt;Refer to the &lt;a href=&#34;https://help.github.com/articles/using-a-custom-domain-with-github-pages/&#34;&gt;official documentation&lt;/a&gt; for further information.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Hopefully this tutorial helped you to get your website off its feet and out into the open! If you have any further questions, feel free to contact the community through the &lt;a href=&#34;http://gohugo.io/community/mailing-list/&#34;&gt;discussion forum&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MathJax Support</title>
      <link>http://gohugo.io/tutorials/mathjax/</link>
      <pubDate>Thu, 20 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://gohugo.io/tutorials/mathjax/</guid>
      <description>

&lt;h2 id=&#34;what-is-mathjax&#34;&gt;What is MathJax?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.mathjax.org/&#34;&gt;MathJax&lt;/a&gt; is a JavaScript library that allows the display of mathematical expressions described via a LaTeX-style syntax in the HTML (or Markdown) source of a web page. As it is a pure a JavaScript library, getting it to work within Hugo is fairly straightforward, but does have some oddities that will be discussed here.&lt;/p&gt;

&lt;p&gt;This is not an introduction into actually using MathJax to render typeset mathematics on your website. Instead, this page is a collection of tips and hints for one way to get MathJax working on a website built with Hugo.&lt;/p&gt;

&lt;h2 id=&#34;enabling-mathjax&#34;&gt;Enabling MathJax&lt;/h2&gt;

&lt;p&gt;The first step is to enable MathJax on pages that you would like to have typeset math. There are multiple ways to do this (adventurous readers can consult the &lt;a href=&#34;http://docs.mathjax.org/en/latest/configuration.html&#34;&gt;Loading and Configuring&lt;/a&gt; section of the MathJax documentation for additional methods of including MathJax), but the easiest way is to use the secure MathJax CDN by including the following HTML snippet in the source of a page:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;
  src=&amp;quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&amp;quot;&amp;gt;
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One way to ensure that this code is included in all pages is to put it in one of the templates that live in the &lt;code&gt;layouts/partials/&lt;/code&gt; directory. For example, I have included this in the bottom of my template &lt;code&gt;footer.html&lt;/code&gt; because I know that the footer will be included in every page of my website.&lt;/p&gt;

&lt;h3 id=&#34;options-and-features&#34;&gt;Options and Features&lt;/h3&gt;

&lt;p&gt;MathJax is a stable open-source library with many features. I encourage the interested reader to view the &lt;a href=&#34;http://docs.mathjax.org/en/latest/index.html&#34;&gt;MathJax Documentation&lt;/a&gt;, specifically the sections on &lt;a href=&#34;http://docs.mathjax.org/en/latest/index.html#basic-usage&#34;&gt;Basic Usage&lt;/a&gt; and &lt;a href=&#34;http://docs.mathjax.org/en/latest/index.html#mathjax-configuration-options&#34;&gt;MathJax Configuration Options&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;issues-with-markdown&#34;&gt;Issues with Markdown&lt;/h2&gt;

&lt;p&gt;After enabling MathJax, any math entered in-between proper markers (see documentation) will be processed and typeset in the web page. One issue that comes up, however, with Markdown is that the underscore character (&lt;code&gt;_&lt;/code&gt;) is interpreted by Markdown as a way to wrap text in &lt;code&gt;emph&lt;/code&gt; blocks while LaTeX (MathJax) interprets the underscore as a way to create a subscript. This &amp;ldquo;double speak&amp;rdquo; of the underscore can result in some unexpected and unwanted behavior.&lt;/p&gt;

&lt;h3 id=&#34;solution&#34;&gt;Solution&lt;/h3&gt;

&lt;p&gt;There are multiple ways to remedy this problem. One solution is to simply escape each underscore in your math code by entering &lt;code&gt;\_&lt;/code&gt; instead of &lt;code&gt;_&lt;/code&gt;. This can become quite tedious if the equations you are entering are full of subscripts.&lt;/p&gt;

&lt;p&gt;Another option is to tell Markdown to treat the MathJax code as verbatim code and not process it. One way to do this is to wrap the math expression inside a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;/div&amp;gt;&lt;/code&gt; block. Markdown would ignore these sections and they would get passed directly on to MathJax and processed correctly. This works great for display style mathematics, but for inline math expressions the line break induced by the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; is not acceptable. The syntax for instructing Markdown to treat inline text as verbatim is by wrapping it in backticks (&lt;code&gt;`&lt;/code&gt;). You might have noticed, however, that the text included in between backticks is rendered differently than standard text (on this site these are items highlighted in red). To get around this problem, we could create a new CSS entry that would apply standard styling to all inline verbatim text that includes MathJax code. Below I will show the HTML and CSS source that would accomplish this (note this solution was adapted from &lt;a href=&#34;http://doswa.com/2011/07/20/mathjax-in-markdown.html&#34;&gt;this blog post&lt;/a&gt;&amp;mdash;all credit goes to the original author).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&amp;quot;text/x-mathjax-config&amp;quot;&amp;gt;
MathJax.Hub.Config({
  tex2jax: {
    inlineMath: [[&#39;$&#39;,&#39;$&#39;], [&#39;\\(&#39;,&#39;\\)&#39;]],
    displayMath: [[&#39;$$&#39;,&#39;$$&#39;], [&#39;\[&#39;,&#39;\]&#39;]],
    processEscapes: true,
    processEnvironments: true,
    skipTags: [&#39;script&#39;, &#39;noscript&#39;, &#39;style&#39;, &#39;textarea&#39;, &#39;pre&#39;],
    TeX: { equationNumbers: { autoNumber: &amp;quot;AMS&amp;quot; },
         extensions: [&amp;quot;AMSmath.js&amp;quot;, &amp;quot;AMSsymbols.js&amp;quot;] }
  }
});
&amp;lt;/script&amp;gt;

&amp;lt;script type=&amp;quot;text/x-mathjax-config&amp;quot;&amp;gt;
  MathJax.Hub.Queue(function() {
    // Fix &amp;lt;code&amp;gt; tags after MathJax finishes running. This is a
    // hack to overcome a shortcoming of Markdown. Discussion at
    // https://github.com/mojombo/jekyll/issues/199
    var all = MathJax.Hub.getAllJax(), i;
    for(i = 0; i &amp;lt; all.length; i += 1) {
        all[i].SourceElement().parentNode.className += &#39; has-jax&#39;;
    }
});
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As before, this content should be included in the HTML source of each page that will be using MathJax. The next code snippet contains the CSS that is used to have verbatim MathJax blocks render with the same font style as the body of the page.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;code.has-jax {font: inherit;
              font-size: 100%;
              background: inherit;
              border: inherit;
              color: #515151;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the CSS snippet, notice the line &lt;code&gt;color: #515151;&lt;/code&gt;. &lt;code&gt;#515151&lt;/code&gt; is the value assigned to the &lt;code&gt;color&lt;/code&gt; attribute of the &lt;code&gt;body&lt;/code&gt; class in my CSS. In order for the equations to fit in with the body of a web page, this value should be the same as the color of the body.&lt;/p&gt;

&lt;h3 id=&#34;usage&#34;&gt;Usage&lt;/h3&gt;

&lt;p&gt;With this setup, everything is in place for a natural usage of MathJax on pages generated using Hugo. In order to include inline mathematics, just put LaTeX code in between &lt;code&gt;`$ TeX Code $`&lt;/code&gt; or &lt;code&gt;`\( TeX Code \)`&lt;/code&gt;. To include display style mathematics, just put LaTeX code in between &lt;code&gt;&amp;lt;div&amp;gt;$$TeX Code$$&amp;lt;/div&amp;gt;&lt;/code&gt;. All the math will be properly typeset and displayed within your Hugo generated web page!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Migrate to Hugo from Jekyll</title>
      <link>http://gohugo.io/tutorials/migrate-from-jekyll/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://gohugo.io/tutorials/migrate-from-jekyll/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Hugo 0.15 comes with a &lt;code&gt;hugo import jekyll&lt;/code&gt; command, see &lt;a href=&#34;http://gohugo.io/commands/hugo_import_jekyll/&#34;&gt;import from Jekyll&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;move-static-content-to-static&#34;&gt;Move static content to &lt;code&gt;static&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Jekyll has a rule that any directory not starting with &lt;code&gt;_&lt;/code&gt; will be copied as-is to the &lt;code&gt;_site&lt;/code&gt; output. Hugo keeps all static content under &lt;code&gt;static&lt;/code&gt;. You should therefore move it all there.
With Jekyll, something that looked like&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;▾ &amp;lt;root&amp;gt;/
    ▾ images/
        logo.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;should become&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;▾ &amp;lt;root&amp;gt;/
    ▾ static/
        ▾ images/
            logo.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as &lt;code&gt;CNAME&lt;/code&gt;) to be moved to &lt;code&gt;static&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;create-your-hugo-configuration-file&#34;&gt;Create your Hugo configuration file&lt;/h2&gt;

&lt;p&gt;Hugo can read your configuration as JSON, YAML or TOML. Hugo supports parameters custom configuration too. Refer to the &lt;a href=&#34;http://gohugo.io/overview/configuration/&#34;&gt;Hugo configuration documentation&lt;/a&gt; for details.&lt;/p&gt;

&lt;h2 id=&#34;set-your-configuration-publish-folder-to-site&#34;&gt;Set your configuration publish folder to &lt;code&gt;_site&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;The default is for Jekyll to publish to &lt;code&gt;_site&lt;/code&gt; and for Hugo to publish to &lt;code&gt;public&lt;/code&gt;. If, like me, you have &lt;a href=&#34;http://blog.blindgaenger.net/generate_github_pages_in_a_submodule.html&#34;&gt;&lt;code&gt;_site&lt;/code&gt; mapped to a git submodule on the &lt;code&gt;gh-pages&lt;/code&gt; branch&lt;/a&gt;, you&amp;rsquo;ll want to do one of two alternatives:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Change your submodule to point to map &lt;code&gt;gh-pages&lt;/code&gt; to public instead of &lt;code&gt;_site&lt;/code&gt; (recommended).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git submodule deinit _site
git rm _site
git submodule add -b gh-pages git@github.com:your-username/your-repo.git public
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Or, change the Hugo configuration to use &lt;code&gt;_site&lt;/code&gt; instead of &lt;code&gt;public&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    ..
    &amp;quot;publishDir&amp;quot;: &amp;quot;_site&amp;quot;,
    ..
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;convert-jekyll-templates-to-hugo-templates&#34;&gt;Convert Jekyll templates to Hugo templates&lt;/h2&gt;

&lt;p&gt;That&amp;rsquo;s the bulk of the work right here. The documentation is your friend. You should refer to &lt;a href=&#34;http://jekyllrb.com/docs/templates/&#34;&gt;Jekyll&amp;rsquo;s template documentation&lt;/a&gt; if you need to refresh your memory on how you built your blog and &lt;a href=&#34;http://gohugo.io/layout/templates/&#34;&gt;Hugo&amp;rsquo;s template&lt;/a&gt; to learn Hugo&amp;rsquo;s way.&lt;/p&gt;

&lt;p&gt;As a single reference data point, converting my templates for &lt;a href=&#34;http://heyitsalex.net/&#34;&gt;heyitsalex.net&lt;/a&gt; took me no more than a few hours.&lt;/p&gt;

&lt;h2 id=&#34;convert-jekyll-plugins-to-hugo-shortcodes&#34;&gt;Convert Jekyll plugins to Hugo shortcodes&lt;/h2&gt;

&lt;p&gt;Jekyll has &lt;a href=&#34;http://jekyllrb.com/docs/plugins/&#34;&gt;plugins&lt;/a&gt;; Hugo has &lt;a href=&#34;http://gohugo.io/doc/shortcodes/&#34;&gt;shortcodes&lt;/a&gt;. It&amp;rsquo;s fairly trivial to do a port.&lt;/p&gt;

&lt;h3 id=&#34;implementation&#34;&gt;Implementation&lt;/h3&gt;

&lt;p&gt;As an example, I was using a custom &lt;a href=&#34;https://github.com/alexandre-normand/alexandre-normand/blob/74bb12036a71334fdb7dba84e073382fc06908ec/_plugins/image_tag.rb&#34;&gt;&lt;code&gt;image_tag&lt;/code&gt;&lt;/a&gt; plugin to generate figures with caption when running Jekyll. As I read about shortcodes, I found Hugo had a nice built-in shortcode that does exactly the same thing.&lt;/p&gt;

&lt;p&gt;Jekyll&amp;rsquo;s plugin:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;module Jekyll
  class ImageTag &amp;lt; Liquid::Tag
    @url = nil
    @caption = nil
    @class = nil
    @link = nil
    // Patterns
    IMAGE_URL_WITH_CLASS_AND_CAPTION =
    IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK = /(\w+)(\s+)((https?:\/\/|\/)(\S+))(\s+)&amp;quot;(.*?)&amp;quot;(\s+)-&amp;gt;((https?:\/\/|\/)(\S+))(\s*)/i
    IMAGE_URL_WITH_CAPTION = /((https?:\/\/|\/)(\S+))(\s+)&amp;quot;(.*?)&amp;quot;/i
    IMAGE_URL_WITH_CLASS = /(\w+)(\s+)((https?:\/\/|\/)(\S+))/i
    IMAGE_URL = /((https?:\/\/|\/)(\S+))/i
    def initialize(tag_name, markup, tokens)
      super
      if markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK
        @class   = $1
        @url     = $3
        @caption = $7
        @link = $9
      elsif markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION
        @class   = $1
        @url     = $3
        @caption = $7
      elsif markup =~ IMAGE_URL_WITH_CAPTION
        @url     = $1
        @caption = $5
      elsif markup =~ IMAGE_URL_WITH_CLASS
        @class = $1
        @url   = $3
      elsif markup =~ IMAGE_URL
        @url = $1
      end
    end
    def render(context)
      if @class
        source = &amp;quot;&amp;lt;figure class=&#39;#{@class}&#39;&amp;gt;&amp;quot;
      else
        source = &amp;quot;&amp;lt;figure&amp;gt;&amp;quot;
      end
      if @link
        source += &amp;quot;&amp;lt;a href=\&amp;quot;#{@link}\&amp;quot;&amp;gt;&amp;quot;
      end
      source += &amp;quot;&amp;lt;img src=\&amp;quot;#{@url}\&amp;quot;&amp;gt;&amp;quot;
      if @link
        source += &amp;quot;&amp;lt;/a&amp;gt;&amp;quot;
      end
      source += &amp;quot;&amp;lt;figcaption&amp;gt;#{@caption}&amp;lt;/figcaption&amp;gt;&amp;quot; if @caption
      source += &amp;quot;&amp;lt;/figure&amp;gt;&amp;quot;
      source
    end
  end
end
Liquid::Template.register_tag(&#39;image&#39;, Jekyll::ImageTag)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;is written as this Hugo shortcode:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!-- image --&amp;gt;
&amp;lt;figure {{ with .Get &amp;quot;class&amp;quot; }}class=&amp;quot;{{.}}&amp;quot;{{ end }}&amp;gt;
    {{ with .Get &amp;quot;link&amp;quot;}}&amp;lt;a href=&amp;quot;{{.}}&amp;quot;&amp;gt;{{ end }}
        &amp;lt;img src=&amp;quot;{{ .Get &amp;quot;src&amp;quot; }}&amp;quot; {{ if or (.Get &amp;quot;alt&amp;quot;) (.Get &amp;quot;caption&amp;quot;) }}alt=&amp;quot;{{ with .Get &amp;quot;alt&amp;quot;}}{{.}}{{else}}{{ .Get &amp;quot;caption&amp;quot; }}{{ end }}&amp;quot;{{ end }} /&amp;gt;
    {{ if .Get &amp;quot;link&amp;quot;}}&amp;lt;/a&amp;gt;{{ end }}
    {{ if or (or (.Get &amp;quot;title&amp;quot;) (.Get &amp;quot;caption&amp;quot;)) (.Get &amp;quot;attr&amp;quot;)}}
    &amp;lt;figcaption&amp;gt;{{ if isset .Params &amp;quot;title&amp;quot; }}
        {{ .Get &amp;quot;title&amp;quot; }}{{ end }}
        {{ if or (.Get &amp;quot;caption&amp;quot;) (.Get &amp;quot;attr&amp;quot;)}}&amp;lt;p&amp;gt;
        {{ .Get &amp;quot;caption&amp;quot; }}
        {{ with .Get &amp;quot;attrlink&amp;quot;}}&amp;lt;a href=&amp;quot;{{.}}&amp;quot;&amp;gt; {{ end }}
            {{ .Get &amp;quot;attr&amp;quot; }}
        {{ if .Get &amp;quot;attrlink&amp;quot;}}&amp;lt;/a&amp;gt; {{ end }}
        &amp;lt;/p&amp;gt; {{ end }}
    &amp;lt;/figcaption&amp;gt;
    {{ end }}
&amp;lt;/figure&amp;gt;
&amp;lt;!-- image --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;usage&#34;&gt;Usage&lt;/h3&gt;

&lt;p&gt;I simply changed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% image full http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg &amp;quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were &amp;quot;having fun&amp;quot; and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.&amp;quot; -&amp;gt;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/ %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to this (this example uses a slightly extended version named &lt;code&gt;fig&lt;/code&gt;, different than the built-in &lt;code&gt;figure&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{% fig class=&amp;quot;full&amp;quot; src=&amp;quot;http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg&amp;quot; title=&amp;quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were having fun and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.&amp;quot; link=&amp;quot;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/&amp;quot; %}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As a bonus, the shortcode named parameters are, arguably, more readable.&lt;/p&gt;

&lt;h2 id=&#34;finishing-touches&#34;&gt;Finishing touches&lt;/h2&gt;

&lt;h3 id=&#34;fix-content&#34;&gt;Fix content&lt;/h3&gt;

&lt;p&gt;Depending on the amount of customization that was done with each post with Jekyll, this step will require more or less effort. There are no hard and fast rules here except that &lt;code&gt;hugo server&lt;/code&gt; is your friend. Test your changes and fix errors as needed.&lt;/p&gt;

&lt;h3 id=&#34;clean-up&#34;&gt;Clean up&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;ll want to remove the Jekyll configuration at this point. If you have anything else that isn&amp;rsquo;t used, delete it.&lt;/p&gt;

&lt;h2 id=&#34;a-practical-example-in-a-diff&#34;&gt;A practical example in a diff&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://heyitsalex.net/&#34;&gt;Hey, it&amp;rsquo;s Alex&lt;/a&gt; was migrated in less than a &lt;em&gt;father-with-kids day&lt;/em&gt; from Jekyll to Hugo. You can see all the changes (and screw-ups) by looking at this &lt;a href=&#34;https://github.com/alexandre-normand/alexandre-normand/compare/869d69435bd2665c3fbf5b5c78d4c22759d7613a...b7f6605b1265e83b4b81495423294208cc74d610&#34;&gt;diff&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>